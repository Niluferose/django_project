--
-- PostgreSQL database dump
--

-- Dumped from database version 15.13 (Debian 15.13-1.pgdg120+1)
-- Dumped by pg_dump version 15.13 (Debian 15.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_celery_results_chordcounter; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_celery_results_chordcounter (
    id integer NOT NULL,
    group_id character varying(255) NOT NULL,
    sub_tasks text NOT NULL,
    count integer NOT NULL,
    CONSTRAINT django_celery_results_chordcounter_count_check CHECK ((count >= 0))
);


ALTER TABLE public.django_celery_results_chordcounter OWNER TO postgres;

--
-- Name: django_celery_results_chordcounter_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_celery_results_chordcounter ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_celery_results_chordcounter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_celery_results_groupresult; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_celery_results_groupresult (
    id integer NOT NULL,
    group_id character varying(255) NOT NULL,
    date_created timestamp with time zone NOT NULL,
    date_done timestamp with time zone NOT NULL,
    content_type character varying(128) NOT NULL,
    content_encoding character varying(64) NOT NULL,
    result text
);


ALTER TABLE public.django_celery_results_groupresult OWNER TO postgres;

--
-- Name: django_celery_results_groupresult_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_celery_results_groupresult ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_celery_results_groupresult_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_celery_results_taskresult; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_celery_results_taskresult (
    id integer NOT NULL,
    task_id character varying(255) NOT NULL,
    status character varying(50) NOT NULL,
    content_type character varying(128) NOT NULL,
    content_encoding character varying(64) NOT NULL,
    result text,
    date_done timestamp with time zone NOT NULL,
    traceback text,
    meta text,
    task_args text,
    task_kwargs text,
    task_name character varying(255),
    worker character varying(100),
    date_created timestamp with time zone NOT NULL,
    periodic_task_name character varying(255)
);


ALTER TABLE public.django_celery_results_taskresult OWNER TO postgres;

--
-- Name: django_celery_results_taskresult_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_celery_results_taskresult ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_celery_results_taskresult_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Name: lmsApp_chatmessage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_chatmessage" (
    id bigint NOT NULL,
    message text NOT NULL,
    response text NOT NULL,
    created timestamp with time zone NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public."lmsApp_chatmessage" OWNER TO postgres;

--
-- Name: lmsApp_chatmessage_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_chatmessage" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_chatmessage_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_event; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_event" (
    id bigint NOT NULL,
    date date NOT NULL,
    user_id integer NOT NULL,
    title character varying(200) NOT NULL
);


ALTER TABLE public."lmsApp_event" OWNER TO postgres;

--
-- Name: lmsApp_event_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_event" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_event_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_lesson; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_lesson" (
    id bigint NOT NULL,
    name character varying(200) NOT NULL,
    field character varying(200) NOT NULL,
    teacher character varying(200) NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public."lmsApp_lesson" OWNER TO postgres;

--
-- Name: lmsApp_lesson_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_lesson" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_lesson_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_message; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_message" (
    id bigint NOT NULL,
    body text NOT NULL,
    updated timestamp with time zone NOT NULL,
    created timestamp with time zone NOT NULL,
    room_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public."lmsApp_message" OWNER TO postgres;

--
-- Name: lmsApp_message_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_message" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_message_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_note; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_note" (
    id bigint NOT NULL,
    title character varying(200) NOT NULL,
    note text NOT NULL,
    lesson_id bigint NOT NULL,
    week_id bigint NOT NULL,
    user_id integer NOT NULL,
    ai_questions text,
    ai_summary text
);


ALTER TABLE public."lmsApp_note" OWNER TO postgres;

--
-- Name: lmsApp_note_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_note" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_note_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_room; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_room" (
    id bigint NOT NULL,
    name character varying(200) NOT NULL,
    description text,
    updated timestamp with time zone NOT NULL,
    created timestamp with time zone NOT NULL,
    host_id integer,
    topic_id bigint
);


ALTER TABLE public."lmsApp_room" OWNER TO postgres;

--
-- Name: lmsApp_room_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_room" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_room_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_room_participants; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_room_participants" (
    id bigint NOT NULL,
    room_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public."lmsApp_room_participants" OWNER TO postgres;

--
-- Name: lmsApp_room_participants_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_room_participants" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_room_participants_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_topic; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_topic" (
    id bigint NOT NULL,
    name character varying(200) NOT NULL
);


ALTER TABLE public."lmsApp_topic" OWNER TO postgres;

--
-- Name: lmsApp_topic_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_topic" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_topic_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_week; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_week" (
    id bigint NOT NULL,
    week_number integer NOT NULL,
    lesson_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public."lmsApp_week" OWNER TO postgres;

--
-- Name: lmsApp_week_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_week" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_week_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: lmsApp_weekpdf; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."lmsApp_weekpdf" (
    id bigint NOT NULL,
    title character varying(200) NOT NULL,
    pdf character varying(100) NOT NULL,
    week_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public."lmsApp_weekpdf" OWNER TO postgres;

--
-- Name: lmsApp_weekpdf_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."lmsApp_weekpdf" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."lmsApp_weekpdf_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add room	7	add_room
26	Can change room	7	change_room
27	Can delete room	7	delete_room
28	Can view room	7	view_room
29	Can add topic	8	add_topic
30	Can change topic	8	change_topic
31	Can delete topic	8	delete_topic
32	Can view topic	8	view_topic
33	Can add message	9	add_message
34	Can change message	9	change_message
35	Can delete message	9	delete_message
36	Can view message	9	view_message
37	Can add lesson	10	add_lesson
38	Can change lesson	10	change_lesson
39	Can delete lesson	10	delete_lesson
40	Can view lesson	10	view_lesson
41	Can add week	11	add_week
42	Can change week	11	change_week
43	Can delete week	11	delete_week
44	Can view week	11	view_week
45	Can add note	12	add_note
46	Can change note	12	change_note
47	Can delete note	12	delete_note
48	Can view note	12	view_note
49	Can add week pdf	13	add_weekpdf
50	Can change week pdf	13	change_weekpdf
51	Can delete week pdf	13	delete_weekpdf
52	Can view week pdf	13	view_weekpdf
53	Can add event	14	add_event
54	Can change event	14	change_event
55	Can delete event	14	delete_event
56	Can view event	14	view_event
57	Can add chat message	15	add_chatmessage
58	Can change chat message	15	change_chatmessage
59	Can delete chat message	15	delete_chatmessage
60	Can view chat message	15	view_chatmessage
61	Can add task result	16	add_taskresult
62	Can change task result	16	change_taskresult
63	Can delete task result	16	delete_taskresult
64	Can view task result	16	view_taskresult
65	Can add chord counter	17	add_chordcounter
66	Can change chord counter	17	change_chordcounter
67	Can delete chord counter	17	delete_chordcounter
68	Can view chord counter	17	view_chordcounter
69	Can add group result	18	add_groupresult
70	Can change group result	18	change_groupresult
71	Can delete group result	18	delete_groupresult
72	Can view group result	18	view_groupresult
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
4	pbkdf2_sha256$1000000$KGWJskRfSP8pqwQd03048F$Ap7crRec8yt38prBpTOtvyyqEtdg0GzP5ZZ5vy6xpoI=	2025-05-25 21:39:48.948697+00	f	nursen				f	t	2025-05-25 21:39:48.698047+00
5	pbkdf2_sha256$1000000$kyZmBLnA3uxMVwr5ayxBvv$ndufMAUGH3v/2GXpeY3Dan4lte4pUiJ2fFaXvAeunAc=	2025-05-25 21:40:02.42021+00	f	ovgu				f	t	2025-05-25 21:40:02.172152+00
6	pbkdf2_sha256$1000000$mkvb3OWUB4FjjpMuHgYb03$2tAA6eaJm9nhtwqtc+4TQmw5Ug9UWeDeSkY+OZHsiy0=	2025-05-25 21:40:17.74666+00	f	ilknur				f	t	2025-05-25 21:40:17.487878+00
8	pbkdf2_sha256$1000000$Xcy8PGw67dxlUrU5SmSAEf$AHCQDpfzPYPY2iXa/1VzpSaVO7KNjmBT/aD7gb/YouM=	2025-05-25 21:40:49.857799+00	f	esin				f	t	2025-05-25 21:40:49.593127+00
7	pbkdf2_sha256$1000000$XwROwr51ickuuQsJO8tCiO$OCn9IQ0SEDw//EPwjohmWnk3RvqKwDfYCquEXobHy2U=	2025-05-25 21:46:46.209973+00	f	eda				f	t	2025-05-25 21:40:34.972421+00
1	pbkdf2_sha256$1000000$Z6pbgoFM9IsHab9u4Geq1b$0VCmGTCIanK+efecwt6YQLG3ByoHwg2L9Yt9gTr85Ec=	2025-05-25 22:01:10.487858+00	f	nilufergul				f	t	2025-05-25 21:38:55.287011+00
2	pbkdf2_sha256$1000000$VfTgiFtDaLtdkT7YIQcFgU$EsGH0P2z/f2d50QoWfAo2djqs+Vr9yeWS01EIqd3b6g=	2025-05-25 22:25:13.012293+00	f	nil				f	t	2025-05-25 21:39:14.137878+00
3	pbkdf2_sha256$1000000$3rCW4fkRnsFCR7C4Yi96E0$0Ir+N/6dMDv/RYb4MPabUFfkPvmQPUy0K9IW8PvskBg=	2025-05-25 22:27:46.111849+00	f	sakir				f	t	2025-05-25 21:39:28.690327+00
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_celery_results_chordcounter; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_celery_results_chordcounter (id, group_id, sub_tasks, count) FROM stdin;
\.


--
-- Data for Name: django_celery_results_groupresult; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_celery_results_groupresult (id, group_id, date_created, date_done, content_type, content_encoding, result) FROM stdin;
\.


--
-- Data for Name: django_celery_results_taskresult; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_celery_results_taskresult (id, task_id, status, content_type, content_encoding, result, date_done, traceback, meta, task_args, task_kwargs, task_name, worker, date_created, periodic_task_name) FROM stdin;
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	lmsApp	room
8	lmsApp	topic
9	lmsApp	message
10	lmsApp	lesson
11	lmsApp	week
12	lmsApp	note
13	lmsApp	weekpdf
14	lmsApp	event
15	lmsApp	chatmessage
16	django_celery_results	taskresult
17	django_celery_results	chordcounter
18	django_celery_results	groupresult
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2025-05-25 21:32:52.056371+00
2	auth	0001_initial	2025-05-25 21:32:52.091076+00
3	admin	0001_initial	2025-05-25 21:32:52.100812+00
4	admin	0002_logentry_remove_auto_add	2025-05-25 21:32:52.104105+00
5	admin	0003_logentry_add_action_flag_choices	2025-05-25 21:32:52.106332+00
6	contenttypes	0002_remove_content_type_name	2025-05-25 21:32:52.111575+00
7	auth	0002_alter_permission_name_max_length	2025-05-25 21:32:52.113873+00
8	auth	0003_alter_user_email_max_length	2025-05-25 21:32:52.116101+00
9	auth	0004_alter_user_username_opts	2025-05-25 21:32:52.118278+00
10	auth	0005_alter_user_last_login_null	2025-05-25 21:32:52.120831+00
11	auth	0006_require_contenttypes_0002	2025-05-25 21:32:52.121166+00
12	auth	0007_alter_validators_add_error_messages	2025-05-25 21:32:52.123484+00
13	auth	0008_alter_user_username_max_length	2025-05-25 21:32:52.128512+00
14	auth	0009_alter_user_last_name_max_length	2025-05-25 21:32:52.130834+00
15	auth	0010_alter_group_name_max_length	2025-05-25 21:32:52.133292+00
16	auth	0011_update_proxy_permissions	2025-05-25 21:32:52.135571+00
17	auth	0012_alter_user_first_name_max_length	2025-05-25 21:32:52.13994+00
18	django_celery_results	0001_initial	2025-05-25 21:32:52.149384+00
19	django_celery_results	0002_add_task_name_args_kwargs	2025-05-25 21:32:52.151826+00
20	django_celery_results	0003_auto_20181106_1101	2025-05-25 21:32:52.152661+00
21	django_celery_results	0004_auto_20190516_0412	2025-05-25 21:32:52.163618+00
22	django_celery_results	0005_taskresult_worker	2025-05-25 21:32:52.167913+00
23	django_celery_results	0006_taskresult_date_created	2025-05-25 21:32:52.177142+00
24	django_celery_results	0007_remove_taskresult_hidden	2025-05-25 21:32:52.178365+00
25	django_celery_results	0008_chordcounter	2025-05-25 21:32:52.186826+00
26	django_celery_results	0009_groupresult	2025-05-25 21:32:52.221882+00
27	django_celery_results	0010_remove_duplicate_indices	2025-05-25 21:32:52.224242+00
28	django_celery_results	0011_taskresult_periodic_task_name	2025-05-25 21:32:52.225402+00
29	lmsApp	0001_initial	2025-05-25 21:32:52.228671+00
30	lmsApp	0002_topic_room_host_message_room_topic	2025-05-25 21:32:52.250522+00
31	lmsApp	0003_alter_room_options_room_participants	2025-05-25 21:32:52.264412+00
32	lmsApp	0004_lesson_student_alter_message_options_week_note	2025-05-25 21:32:52.286899+00
33	lmsApp	0005_weekpdf	2025-05-25 21:32:52.292336+00
34	lmsApp	0006_delete_student_lesson_user_note_user_week_user_and_more	2025-05-25 21:32:52.318335+00
35	lmsApp	0007_remove_lesson_user_remove_note_user_remove_week_user_and_more	2025-05-25 21:32:52.338937+00
36	lmsApp	0008_lesson_user_note_user_week_user_weekpdf_user	2025-05-25 21:32:52.361896+00
37	lmsApp	0009_alter_note_lesson_alter_note_week_alter_week_lesson_and_more	2025-05-25 21:32:52.401978+00
38	lmsApp	0010_alter_note_lesson_alter_note_week_alter_week_lesson_and_more	2025-05-25 21:32:52.427643+00
39	lmsApp	0011_event	2025-05-25 21:32:52.435466+00
40	lmsApp	0012_rename_event_date_event_date_and_more	2025-05-25 21:32:52.454668+00
41	lmsApp	0013_remove_event_theme	2025-05-25 21:32:52.459521+00
42	lmsApp	0014_remove_weekpdf_user	2025-05-25 21:32:52.465189+00
43	lmsApp	0015_weekpdf_user	2025-05-25 21:32:52.471752+00
44	lmsApp	0016_alter_weekpdf_pdf	2025-05-25 21:32:52.475594+00
45	lmsApp	0017_note_ai_questions_note_ai_summary_chatmessage	2025-05-25 21:32:52.49343+00
46	sessions	0001_initial	2025-05-25 21:32:52.498615+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
ykkw4hsz3z6gt5un0ypmb6h9tmoyuv48	.eJxVjEsOAiEQBe_C2hDkJ7h07xlId0PLqIFkmFkZ766TzEK3r6reSyRYl5rWUeY0ZXEWRhx-NwR6lLaBfId265J6W-YJ5abInQ557bk8L7v7d1Bh1G-tTQjKe7ABnT2Rp6NDJl-MIuXYaoMYAgEzRyoYdETtM5qYtbZsmMX7A9-nOG4:1uJJoo:IIES6NGb-PIFOpm-qNJLsXumtpHQiou_nUfC16N8ruQ	2025-06-08 22:27:46.113039+00
\.


--
-- Data for Name: lmsApp_chatmessage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_chatmessage" (id, message, response, created, user_id) FROM stdin;
\.


--
-- Data for Name: lmsApp_event; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_event" (id, date, user_id, title) FROM stdin;
\.


--
-- Data for Name: lmsApp_lesson; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_lesson" (id, name, field, teacher, user_id) FROM stdin;
81	Web Programming - Django	CSE	Ahmet Bulut	2
82	Data Science and AI	CSE	Barış Arslan	2
83	Networks	CSE	Mehmet Serkan Apaydın	2
84	Operating Systems	CSE	Mahsa Ziraksima	2
85	Cloud Computing	CSE	Ahmet Bulut	2
86	Web Programming - Django	CSE	Ahmet Bulut	3
87	Data Science and AI	CSE	Barış Arslan	3
88	Networks	CSE	Mehmet Serkan Apaydın	3
89	Operating Systems	CSE	Mahsa Ziraksima	3
90	Cloud Computing	CSE	Ahmet Bulut	3
91	Web Programming - Django	CSE	Ahmet Bulut	4
92	Data Science and AI	CSE	Barış Arslan	4
93	Networks	CSE	Mehmet Serkan Apaydın	4
94	Operating Systems	CSE	Mahsa Ziraksima	4
95	Cloud Computing	CSE	Ahmet Bulut	4
96	Web Programming - Django	CSE	Ahmet Bulut	5
97	Data Science and AI	CSE	Barış Arslan	5
98	Networks	CSE	Mehmet Serkan Apaydın	5
99	Operating Systems	CSE	Mahsa Ziraksima	5
100	Cloud Computing	CSE	Ahmet Bulut	5
101	Web Programming - Django	CSE	Ahmet Bulut	6
102	Data Science and AI	CSE	Barış Arslan	6
103	Networks	CSE	Mehmet Serkan Apaydın	6
104	Operating Systems	CSE	Mahsa Ziraksima	6
105	Cloud Computing	CSE	Ahmet Bulut	6
106	Web Programming - Django	CSE	Ahmet Bulut	7
107	Data Science and AI	CSE	Barış Arslan	7
108	Networks	CSE	Mehmet Serkan Apaydın	7
109	Operating Systems	CSE	Mahsa Ziraksima	7
110	Cloud Computing	CSE	Ahmet Bulut	7
111	Web Programming - Django	CSE	Ahmet Bulut	8
112	Data Science and AI	CSE	Barış Arslan	8
113	Networks	CSE	Mehmet Serkan Apaydın	8
114	Operating Systems	CSE	Mahsa Ziraksima	8
115	Cloud Computing	CSE	Ahmet Bulut	8
116	Web Programming - Django	CSE	Ahmet Bulut	1
117	Data Science and AI	CSE	Barış Arslan	1
118	Networks	CSE	Mehmet Serkan Apaydın	1
119	Operating Systems	CSE	Mahsa Ziraksima	1
120	Cloud Computing	CSE	Ahmet Bulut	1
\.


--
-- Data for Name: lmsApp_message; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_message" (id, body, updated, created, room_id, user_id) FROM stdin;
\.


--
-- Data for Name: lmsApp_note; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_note" (id, title, note, lesson_id, week_id, user_id, ai_questions, ai_summary) FROM stdin;
81	Django Temelleri	Django, Python tabanlı güçlü bir web framework'üdür. Modern web uygulamaları geliştirmek için tasarlanmış, hızlı ve güvenli bir çözüm sunar.\n\nMVT (Model-View-Template) Mimarisi:\n• Model: Veritabanı yapısını ve iş mantığını tanımlar\n• View: Kullanıcı isteklerini işler ve template'lere veri gönderir\n• Template: Kullanıcı arayüzünü oluşturur\n\nTemel Özellikler:\n1. Admin Paneli\n   - Veritabanı yönetimi için hazır arayüz\n   - CRUD işlemleri için otomatik formlar\n\n2. Güvenlik\n   - SQL injection koruması\n   - XSS ve CSRF koruması\n   - Güvenli şifre yönetimi\n\n3. URL ve Template Sistemi\n   - SEO dostu URL'ler\n   - Template inheritance\n   - Context-based rendering	116	1151	1	\N	\N
82	Django Proje Yapısı	Django projesi, bir ana proje ve birden fazla uygulamadan oluşan modüler bir yapıya sahiptir.\n\nProje Oluşturma:\n1. django-admin startproject proje_adi\n   - settings.py: Proje ayarları\n   - urls.py: Ana URL yapılandırması\n   - wsgi.py: WSGI uygulaması\n\n2. python manage.py startapp uygulama_adi\n   - models.py: Veritabanı modelleri\n   - views.py: View fonksiyonları\n   - urls.py: Uygulama URL'leri\n\nÖnemli Komutlar:\n• python manage.py runserver\n• python manage.py makemigrations\n• python manage.py migrate\n• python manage.py createsuperuser	116	1151	1	\N	\N
83	URL Yapılandırması	Django'da URL'ler, kullanıcı isteklerini doğru view'lara yönlendirir.\n\nURL Patterns:\n• path(): Basit URL eşleştirme\n• re_path(): Regex tabanlı eşleştirme\n• include(): URL'leri modüler hale getirme\n\nURL Parametreleri:\n• <int:pk>: Sayısal parametre\n• <str:slug>: Metin parametresi\n• <uuid:uuid>: UUID parametresi\n\nNamed URL Patterns:\n• {% url 'view_name' param %}: Template'de kullanım\n• reverse('view_name', args=[param]): View'da kullanım	116	1152	1	\N	\N
84	View ve Template Sistemi	Django'da view'lar ve template'ler, web uygulamasının görünüm katmanını oluşturur.\n\nView Tipleri:\n1. Function Based Views\n   - Basit ve anlaşılır\n   - request parametresi\n   - HTTP yanıtı döndürme\n\n2. Class Based Views\n   - Kod tekrarını önleme\n   - Mixin'ler ile genişletme\n   - HTTP metodlarına göre işlem\n\nTemplate Özellikleri:\n• Değişken kullanımı: {{ variable }}\n• Tag'ler: {% tag %}\n• Filtreler: {{ variable|filter }}\n• Template inheritance	116	1152	1	\N	\N
85	Model ve Veritabanı	Django'da model'ler, veritabanı tablolarını Python sınıfları olarak tanımlar.\n\nModel Alanları:\n• CharField: Kısa metin\n• TextField: Uzun metin\n• IntegerField: Tam sayı\n• DateTimeField: Tarih ve saat\n• ForeignKey: Bire-çok ilişki\n• ManyToManyField: Çoka-çok ilişki\n\nModel İlişkileri:\n1. One-to-One\n2. One-to-Many\n3. Many-to-Many\n\nMigration'lar:\n• makemigrations: Değişiklikleri kaydet\n• migrate: Değişiklikleri uygula	116	1153	1	\N	\N
86	Django ORM	Django ORM, veritabanı işlemlerini Python nesneleri üzerinden yapar.\n\nQuerySet API:\n• filter(): Filtreleme\n• exclude(): Hariç tutma\n• get(): Tek nesne alma\n• all(): Tüm nesneleri alma\n\nSorgu Optimizasyonu:\n• select_related(): Foreign key ilişkileri\n• prefetch_related(): Many-to-many ilişkileri\n• values(): Belirli alanları seçme	116	1153	1	\N	\N
87	Form İşlemleri	Django form sistemi, HTML formlarını oluşturur ve işler.\n\nForm Tipleri:\n1. ModelForm\n   - Model ile otomatik form\n   - CRUD işlemleri\n   - Validasyon\n\n2. Form\n   - Özel form alanları\n   - Manuel validasyon\n   - Esnek yapı\n\nForm Alanları:\n• CharField\n• EmailField\n• DateField\n• ChoiceField\n• FileField	116	1154	1	\N	\N
88	Template Inheritance	Django template inheritance, template'leri yeniden kullanmayı sağlar.\n\nTemel Kavramlar:\n• Base template\n• Block tanımlama\n• Template extends\n• Include tag\n\nBlock Kullanımı:\n{% block content %}\n    İçerik buraya\n{% endblock %}	116	1154	1	\N	\N
89	Authentication	Django authentication sistemi, kullanıcı yönetimini sağlar.\n\nTemel Özellikler:\n1. User Model\n   - Kullanıcı bilgileri\n   - Grup ve izinler\n   - Şifre yönetimi\n\n2. Authentication Views\n   - Login/Logout\n   - Password reset\n   - Registration\n\n3. Decorators\n   - @login_required\n   - @permission_required	116	1155	1	\N	\N
90	User Management	Django user management, kullanıcı hesaplarını yönetir.\n\nKullanıcı İşlemleri:\n• Kayıt\n• Giriş/Çıkış\n• Şifre değiştirme\n• Profil güncelleme\n\nGüvenlik:\n• Şifre hash'leme\n• Session yönetimi\n• Token authentication	116	1155	1	\N	\N
91	Class Based Views	Django class based views, view'ları sınıf tabanlı tanımlar.\n\nTemel Sınıflar:\n1. View\n   - HTTP metodları\n   - Mixin'ler\n   - Özelleştirme\n\n2. Generic Views\n   - ListView\n   - DetailView\n   - CreateView\n   - UpdateView\n   - DeleteView	116	1156	1	\N	\N
92	Generic Views	Django generic views, yaygın işlemler için hazır view'lar sunar.\n\nListView Özellikleri:\n• Pagination\n• Filtering\n• Sorting\n• Search\n\nDetailView Özellikleri:\n• Object retrieval\n• Context data\n• Template rendering	116	1156	1	\N	\N
93	Django REST Framework	Django REST Framework, API geliştirmeyi kolaylaştırır.\n\nTemel Bileşenler:\n1. Serializers\n   - Model serialization\n   - Validation\n   - Nested data\n\n2. ViewSets\n   - CRUD operations\n   - Custom actions\n   - Permissions\n\n3. Routers\n   - URL patterns\n   - ViewSet mapping	116	1157	1	\N	\N
94	API Tasarımı	REST API tasarımı, modern web uygulamaları için önemlidir.\n\nTemel Prensipler:\n• Resource-based URLs\n• HTTP metodları\n• Status codes\n• Authentication\n• Versioning	116	1157	1	\N	\N
95	Middleware	Django middleware, request/response cycle'ını yönetir.\n\nTemel Middleware'ler:\n1. Authentication\n2. Session\n3. Security\n4. CSRF\n5. CORS\n\nCustom Middleware:\n• Request processing\n• Response processing\n• Error handling	116	1158	1	\N	\N
96	Güvenlik	Django güvenlik önlemleri, web uygulamalarını korur.\n\nTemel Önlemler:\n• CSRF koruması\n• XSS koruması\n• SQL injection koruması\n• Clickjacking koruması\n• SSL/HTTPS	116	1158	1	\N	\N
97	Django Signals	Django signals, olay tabanlı programlamayı sağlar.\n\nTemel Signal'lar:\n• post_save\n• pre_save\n• post_delete\n• pre_delete\n\nSignal Kullanımı:\n• Signal tanımlama\n• Receiver fonksiyonları\n• Signal gönderme	116	1159	1	\N	\N
98	Custom Signals	Custom signal'lar, özel olaylar tanımlar.\n\nSignal Özellikleri:\n• Asenkron çalışma\n• Hata toleransı\n• Modüler yapı\n• Event handling	116	1159	1	\N	\N
115	Middleware	Django middleware, request/response cycle'ını yönetir.\n\nTemel Middleware'ler:\n1. Authentication\n2. Session\n3. Security\n4. CSRF\n5. CORS\n\nCustom Middleware:\n• Request processing\n• Response processing\n• Error handling	81	568	2	\N	\N
116	Güvenlik	Django güvenlik önlemleri, web uygulamalarını korur.\n\nTemel Önlemler:\n• CSRF koruması\n• XSS koruması\n• SQL injection koruması\n• Clickjacking koruması\n• SSL/HTTPS	81	568	2	\N	\N
99	Django Deployment	Django deployment, uygulamayı production'a taşır.\n\nDeployment Adımları:\n1. Environment\n   - Debug mode\n   - Secret key\n   - Allowed hosts\n\n2. Static/Media Files\n   - collectstatic\n   - CDN\n   - Storage\n\n3. Database\n   - Migration\n   - Backup\n   - Optimization	116	1160	1	\N	\N
100	Performance Optimization	Django performans optimizasyonu, uygulama hızını artırır.\n\nOptimizasyon Alanları:\n• Database queries\n• Caching\n• Template rendering\n• Static files\n• Code profiling	116	1160	1	\N	\N
101	Django Temelleri	Django, Python tabanlı güçlü bir web framework'üdür. Modern web uygulamaları geliştirmek için tasarlanmış, hızlı ve güvenli bir çözüm sunar.\n\nMVT (Model-View-Template) Mimarisi:\n• Model: Veritabanı yapısını ve iş mantığını tanımlar\n• View: Kullanıcı isteklerini işler ve template'lere veri gönderir\n• Template: Kullanıcı arayüzünü oluşturur\n\nTemel Özellikler:\n1. Admin Paneli\n   - Veritabanı yönetimi için hazır arayüz\n   - CRUD işlemleri için otomatik formlar\n\n2. Güvenlik\n   - SQL injection koruması\n   - XSS ve CSRF koruması\n   - Güvenli şifre yönetimi\n\n3. URL ve Template Sistemi\n   - SEO dostu URL'ler\n   - Template inheritance\n   - Context-based rendering	81	561	2	\N	\N
102	Django Proje Yapısı	Django projesi, bir ana proje ve birden fazla uygulamadan oluşan modüler bir yapıya sahiptir.\n\nProje Oluşturma:\n1. django-admin startproject proje_adi\n   - settings.py: Proje ayarları\n   - urls.py: Ana URL yapılandırması\n   - wsgi.py: WSGI uygulaması\n\n2. python manage.py startapp uygulama_adi\n   - models.py: Veritabanı modelleri\n   - views.py: View fonksiyonları\n   - urls.py: Uygulama URL'leri\n\nÖnemli Komutlar:\n• python manage.py runserver\n• python manage.py makemigrations\n• python manage.py migrate\n• python manage.py createsuperuser	81	561	2	\N	\N
103	URL Yapılandırması	Django'da URL'ler, kullanıcı isteklerini doğru view'lara yönlendirir.\n\nURL Patterns:\n• path(): Basit URL eşleştirme\n• re_path(): Regex tabanlı eşleştirme\n• include(): URL'leri modüler hale getirme\n\nURL Parametreleri:\n• <int:pk>: Sayısal parametre\n• <str:slug>: Metin parametresi\n• <uuid:uuid>: UUID parametresi\n\nNamed URL Patterns:\n• {% url 'view_name' param %}: Template'de kullanım\n• reverse('view_name', args=[param]): View'da kullanım	81	562	2	\N	\N
104	View ve Template Sistemi	Django'da view'lar ve template'ler, web uygulamasının görünüm katmanını oluşturur.\n\nView Tipleri:\n1. Function Based Views\n   - Basit ve anlaşılır\n   - request parametresi\n   - HTTP yanıtı döndürme\n\n2. Class Based Views\n   - Kod tekrarını önleme\n   - Mixin'ler ile genişletme\n   - HTTP metodlarına göre işlem\n\nTemplate Özellikleri:\n• Değişken kullanımı: {{ variable }}\n• Tag'ler: {% tag %}\n• Filtreler: {{ variable|filter }}\n• Template inheritance	81	562	2	\N	\N
105	Model ve Veritabanı	Django'da veritabanı işlemleri model sınıfları üzerinden yapılır.\n\nVeritabanı Modelleri:\n• Her model bir veritabanı tablosunu temsil eder\n• Model alanları tablo sütunlarını belirler\n• İlişkiler ForeignKey ve ManyToManyField ile kurulur\n\nTemel Alan Tipleri:\n1. Metin Alanları\n   - CharField: Sınırlı uzunlukta metin\n   - TextField: Sınırsız uzunlukta metin\n   - SlugField: URL-dostu metin\n\n2. Sayısal Alanlar\n   - IntegerField: Tam sayılar\n   - FloatField: Ondalıklı sayılar\n   - DecimalField: Hassas ondalıklı sayılar\n\n3. Tarih/Zaman Alanları\n   - DateTimeField: Tarih ve saat\n   - DateField: Sadece tarih\n   - TimeField: Sadece saat	81	563	2	\N	\N
106	Django ORM	Django ORM, veritabanı işlemlerini Python nesneleri üzerinden yapar.\n\nSorgu İşlemleri:\n1. Temel Sorgular\n   - all(): Tüm kayıtları getirir\n   - filter(): Koşullu filtreleme\n   - exclude(): Hariç tutma\n   - get(): Tek kayıt getirme\n\n2. İlişkisel Sorgular\n   - select_related(): Foreign key ilişkileri\n   - prefetch_related(): Many-to-many ilişkileri\n   - values(): Belirli alanları seçme\n\n3. Sorgu Optimizasyonu\n   - only(): Belirli alanları seçme\n   - defer(): Belirli alanları erteleme\n   - using(): Veritabanı seçimi	81	563	2	\N	\N
107	Form İşlemleri	Django form sistemi, kullanıcı girdilerini yönetir.\n\nForm Tipleri:\n1. ModelForm\n   - Model ile otomatik form oluşturma\n   - CRUD işlemleri için hazır\n   - Validasyon kuralları otomatik\n\n2. Form\n   - Özel form alanları\n   - Manuel validasyon\n   - Esnek yapı\n\nForm Alanları:\n• CharField: Metin girişi\n• EmailField: E-posta girişi\n• DateField: Tarih seçimi\n• ChoiceField: Seçim listesi\n• FileField: Dosya yükleme	81	564	2	\N	\N
108	Template Inheritance	Django template sistemi, HTML şablonlarını yönetir.\n\nTemplate Yapısı:\n1. Base Template\n   - Ortak HTML yapısı\n   - CSS ve JS dosyaları\n   - Header ve footer\n\n2. Block Sistemi\n   - {% block %}: İçerik alanları\n   - {% extends %}: Template kalıtımı\n   - {% include %}: Parça ekleme\n\n3. Template Etiketleri\n   - {% if %}: Koşullu içerik\n   - {% for %}: Döngüler\n   - {% with %}: Değişken tanımlama	81	564	2	\N	\N
109	Authentication	Django kimlik doğrulama sistemi, kullanıcı yönetimini sağlar.\n\nKullanıcı Yönetimi:\n1. User Model\n   - Kullanıcı bilgileri\n   - Grup ve izinler\n   - Şifre yönetimi\n\n2. Authentication Views\n   - Login/Logout işlemleri\n   - Şifre sıfırlama\n   - Kullanıcı kaydı\n\n3. Decorators\n   - @login_required: Giriş kontrolü\n   - @permission_required: İzin kontrolü\n   - @user_passes_test: Özel kontrol	81	565	2	\N	\N
110	User Management	Django kullanıcı yönetimi, hesap işlemlerini yönetir.\n\nKullanıcı İşlemleri:\n1. Hesap Yönetimi\n   - Kayıt olma\n   - Giriş/Çıkış\n   - Profil güncelleme\n\n2. Güvenlik\n   - Şifre hash'leme\n   - Session yönetimi\n   - Token authentication\n\n3. İzinler\n   - Grup bazlı izinler\n   - Kullanıcı bazlı izinler\n   - Özel izinler	81	565	2	\N	\N
111	Class Based Views	Django class based views, view'ları sınıf tabanlı tanımlar.\n\nTemel Sınıflar:\n1. View\n   - HTTP metodları\n   - Mixin'ler\n   - Özelleştirme\n\n2. Generic Views\n   - ListView\n   - DetailView\n   - CreateView\n   - UpdateView\n   - DeleteView	81	566	2	\N	\N
112	Generic Views	Django generic views, yaygın işlemler için hazır view'lar sunar.\n\nListView Özellikleri:\n• Pagination\n• Filtering\n• Sorting\n• Search\n\nDetailView Özellikleri:\n• Object retrieval\n• Context data\n• Template rendering	81	566	2	\N	\N
113	Django REST Framework	Django REST Framework, API geliştirmeyi kolaylaştırır.\n\nTemel Bileşenler:\n1. Serializers\n   - Model serialization\n   - Validation\n   - Nested data\n\n2. ViewSets\n   - CRUD operations\n   - Custom actions\n   - Permissions\n\n3. Routers\n   - URL patterns\n   - ViewSet mapping	81	567	2	\N	\N
114	API Tasarımı	REST API tasarımı, modern web uygulamaları için önemlidir.\n\nTemel Prensipler:\n• Resource-based URLs\n• HTTP metodları\n• Status codes\n• Authentication\n• Versioning	81	567	2	\N	\N
117	Django Signals	Django signals, olay tabanlı programlamayı sağlar.\n\nTemel Signal'lar:\n• post_save\n• pre_save\n• post_delete\n• pre_delete\n\nSignal Kullanımı:\n• Signal tanımlama\n• Receiver fonksiyonları\n• Signal gönderme	81	569	2	\N	\N
118	Custom Signals	Custom signal'lar, özel olaylar tanımlar.\n\nSignal Özellikleri:\n• Asenkron çalışma\n• Hata toleransı\n• Modüler yapı\n• Event handling	81	569	2	\N	\N
119	Django Deployment	Django deployment, uygulamayı production'a taşır.\n\nDeployment Adımları:\n1. Environment\n   - Debug mode\n   - Secret key\n   - Allowed hosts\n\n2. Static/Media Files\n   - collectstatic\n   - CDN\n   - Storage\n\n3. Database\n   - Migration\n   - Backup\n   - Optimization	81	570	2	\N	\N
120	Performance Optimization	Django performans optimizasyonu, uygulama hızını artırır.\n\nOptimizasyon Alanları:\n• Database queries\n• Caching\n• Template rendering\n• Static files\n• Code profiling	81	570	2	\N	\N
121	Django Temelleri	Django, Python tabanlı güçlü bir web framework'üdür. Modern web uygulamaları geliştirmek için tasarlanmış, hızlı ve güvenli bir çözüm sunar.\n\nMVT (Model-View-Template) Mimarisi:\n• Model: Veritabanı yapısını ve iş mantığını tanımlar\n• View: Kullanıcı isteklerini işler ve template'lere veri gönderir\n• Template: Kullanıcı arayüzünü oluşturur\n\nTemel Özellikler:\n1. Admin Paneli\n   - Veritabanı yönetimi için hazır arayüz\n   - CRUD işlemleri için otomatik formlar\n\n2. Güvenlik\n   - SQL injection koruması\n   - XSS ve CSRF koruması\n   - Güvenli şifre yönetimi\n\n3. URL ve Template Sistemi\n   - SEO dostu URL'ler\n   - Template inheritance\n   - Context-based rendering	86	631	3	\N	\N
122	Django Proje Yapısı	Django projesi, bir ana proje ve birden fazla uygulamadan oluşan modüler bir yapıya sahiptir.\n\nProje Oluşturma:\n1. django-admin startproject proje_adi\n   - settings.py: Proje ayarları\n   - urls.py: Ana URL yapılandırması\n   - wsgi.py: WSGI uygulaması\n\n2. python manage.py startapp uygulama_adi\n   - models.py: Veritabanı modelleri\n   - views.py: View fonksiyonları\n   - urls.py: Uygulama URL'leri\n\nÖnemli Komutlar:\n• python manage.py runserver\n• python manage.py makemigrations\n• python manage.py migrate\n• python manage.py createsuperuser	86	631	3	\N	\N
123	URL Yapılandırması	Django'da URL'ler, kullanıcı isteklerini doğru view'lara yönlendirir.\n\nURL Patterns:\n• path(): Basit URL eşleştirme\n• re_path(): Regex tabanlı eşleştirme\n• include(): URL'leri modüler hale getirme\n\nURL Parametreleri:\n• <int:pk>: Sayısal parametre\n• <str:slug>: Metin parametresi\n• <uuid:uuid>: UUID parametresi\n\nNamed URL Patterns:\n• {% url 'view_name' param %}: Template'de kullanım\n• reverse('view_name', args=[param]): View'da kullanım	86	632	3	\N	\N
124	View ve Template Sistemi	Django'da view'lar ve template'ler, web uygulamasının görünüm katmanını oluşturur.\n\nView Tipleri:\n1. Function Based Views\n   - Basit ve anlaşılır\n   - request parametresi\n   - HTTP yanıtı döndürme\n\n2. Class Based Views\n   - Kod tekrarını önleme\n   - Mixin'ler ile genişletme\n   - HTTP metodlarına göre işlem\n\nTemplate Özellikleri:\n• Değişken kullanımı: {{ variable }}\n• Tag'ler: {% tag %}\n• Filtreler: {{ variable|filter }}\n• Template inheritance	86	632	3	\N	\N
125	Model ve Veritabanı	Django'da veritabanı yönetimi model sınıfları ile yapılır.\n\nModel Yapısı:\n• Her model bir veritabanı tablosunu temsil eder\n• Alanlar tablo sütunlarını belirler\n• İlişkiler model sınıfları arasında kurulur\n\nVeritabanı İlişkileri:\n1. One-to-One\n   - Bir kayıt bir başka kayıtla eşleşir\n   - OneToOneField kullanılır\n   - Örnek: User ve Profile\n\n2. One-to-Many\n   - Bir kayıt birden çok kayıtla ilişkili\n   - ForeignKey kullanılır\n   - Örnek: Category ve Product\n\n3. Many-to-Many\n   - Kayıtlar çoklu ilişkiler kurar\n   - ManyToManyField kullanılır\n   - Örnek: Student ve Course	86	633	3	\N	\N
126	Django ORM	Django ORM, veritabanı işlemlerini Python nesneleri üzerinden yapar.\n\nSorgu Yapısı:\n1. Temel Sorgular\n   - all(): Tüm kayıtları getirir\n   - filter(): Koşullu filtreleme\n   - exclude(): Hariç tutma\n   - get(): Tek kayıt getirme\n\n2. İlişkisel Sorgular\n   - select_related(): Foreign key ilişkileri\n   - prefetch_related(): Many-to-many ilişkileri\n   - values(): Belirli alanları seçme\n\n3. Sorgu Optimizasyonu\n   - only(): Belirli alanları seçme\n   - defer(): Belirli alanları erteleme\n   - using(): Veritabanı seçimi	86	633	3	\N	\N
127	Form İşlemleri	Django form sistemi, kullanıcı girdilerini yönetir.\n\nForm Tipleri:\n1. ModelForm\n   - Model ile otomatik form oluşturma\n   - CRUD işlemleri için hazır\n   - Validasyon kuralları otomatik\n\n2. Form\n   - Özel form alanları\n   - Manuel validasyon\n   - Esnek yapı\n\nForm Alanları:\n• CharField: Metin girişi\n• EmailField: E-posta girişi\n• DateField: Tarih seçimi\n• ChoiceField: Seçim listesi\n• FileField: Dosya yükleme	86	634	3	\N	\N
128	Template Inheritance	Django template sistemi, HTML şablonlarını yönetir.\n\nTemplate Yapısı:\n1. Base Template\n   - Ortak HTML yapısı\n   - CSS ve JS dosyaları\n   - Header ve footer\n\n2. Block Sistemi\n   - {% block %}: İçerik alanları\n   - {% extends %}: Template kalıtımı\n   - {% include %}: Parça ekleme\n\n3. Template Etiketleri\n   - {% if %}: Koşullu içerik\n   - {% for %}: Döngüler\n   - {% with %}: Değişken tanımlama	86	634	3	\N	\N
129	Authentication	Django kimlik doğrulama sistemi, kullanıcı yönetimini sağlar.\n\nKullanıcı Yönetimi:\n1. User Model\n   - Kullanıcı bilgileri\n   - Grup ve izinler\n   - Şifre yönetimi\n\n2. Authentication Views\n   - Login/Logout işlemleri\n   - Şifre sıfırlama\n   - Kullanıcı kaydı\n\n3. Decorators\n   - @login_required: Giriş kontrolü\n   - @permission_required: İzin kontrolü\n   - @user_passes_test: Özel kontrol	86	635	3	\N	\N
130	User Management	Django kullanıcı yönetimi, hesap işlemlerini yönetir.\n\nKullanıcı İşlemleri:\n1. Hesap Yönetimi\n   - Kayıt olma\n   - Giriş/Çıkış\n   - Profil güncelleme\n\n2. Güvenlik\n   - Şifre hash'leme\n   - Session yönetimi\n   - Token authentication\n\n3. İzinler\n   - Grup bazlı izinler\n   - Kullanıcı bazlı izinler\n   - Özel izinler	86	635	3	\N	\N
131	Class Based Views	Django class based views, view'ları sınıf tabanlı tanımlar.\n\nTemel Sınıflar:\n1. View\n   - HTTP metodları\n   - Mixin'ler\n   - Özelleştirme\n\n2. Generic Views\n   - ListView\n   - DetailView\n   - CreateView\n   - UpdateView\n   - DeleteView	86	636	3	\N	\N
132	Generic Views	Django generic views, yaygın işlemler için hazır view'lar sunar.\n\nListView Özellikleri:\n• Pagination\n• Filtering\n• Sorting\n• Search\n\nDetailView Özellikleri:\n• Object retrieval\n• Context data\n• Template rendering	86	636	3	\N	\N
133	Django REST Framework	Django REST Framework, API geliştirmeyi kolaylaştırır.\n\nTemel Bileşenler:\n1. Serializers\n   - Model serialization\n   - Validation\n   - Nested data\n\n2. ViewSets\n   - CRUD operations\n   - Custom actions\n   - Permissions\n\n3. Routers\n   - URL patterns\n   - ViewSet mapping	86	637	3	\N	\N
134	API Tasarımı	REST API tasarımı, modern web uygulamaları için önemlidir.\n\nTemel Prensipler:\n• Resource-based URLs\n• HTTP metodları\n• Status codes\n• Authentication\n• Versioning	86	637	3	\N	\N
135	Middleware	Django middleware, request/response cycle'ını yönetir.\n\nTemel Middleware'ler:\n1. Authentication\n2. Session\n3. Security\n4. CSRF\n5. CORS\n\nCustom Middleware:\n• Request processing\n• Response processing\n• Error handling	86	638	3	\N	\N
136	Güvenlik	Django güvenlik önlemleri, web uygulamalarını korur.\n\nTemel Önlemler:\n• CSRF koruması\n• XSS koruması\n• SQL injection koruması\n• Clickjacking koruması\n• SSL/HTTPS	86	638	3	\N	\N
137	Django Signals	Django signals, olay tabanlı programlamayı sağlar.\n\nTemel Signal'lar:\n• post_save\n• pre_save\n• post_delete\n• pre_delete\n\nSignal Kullanımı:\n• Signal tanımlama\n• Receiver fonksiyonları\n• Signal gönderme	86	639	3	\N	\N
138	Custom Signals	Custom signal'lar, özel olaylar tanımlar.\n\nSignal Özellikleri:\n• Asenkron çalışma\n• Hata toleransı\n• Modüler yapı\n• Event handling	86	639	3	\N	\N
139	Django Deployment	Django deployment, uygulamayı production'a taşır.\n\nDeployment Adımları:\n1. Environment\n   - Debug mode\n   - Secret key\n   - Allowed hosts\n\n2. Static/Media Files\n   - collectstatic\n   - CDN\n   - Storage\n\n3. Database\n   - Migration\n   - Backup\n   - Optimization	86	640	3	\N	\N
140	Performance Optimization	Django performans optimizasyonu, uygulama hızını artırır.\n\nOptimizasyon Alanları:\n• Database queries\n• Caching\n• Template rendering\n• Static files\n• Code profiling	86	640	3	\N	\N
141	Form İşlemleri	Django form sistemi, kullanıcı etkileşimini yönetir.\n\nForm Yapısı:\n1. ModelForm\n   - Model ile otomatik form oluşturma\n   - CRUD işlemleri için hazır\n   - Validasyon kuralları otomatik\n\n2. Form\n   - Özel form alanları\n   - Manuel validasyon\n   - Esnek yapı\n\nForm Alanları:\n• CharField: Metin girişi\n• EmailField: E-posta girişi\n• DateField: Tarih seçimi\n• ChoiceField: Seçim listesi\n• FileField: Dosya yükleme	91	704	4	\N	\N
142	Template Inheritance	Django template sistemi, HTML şablonlarını yönetir.\n\nTemplate Yapısı:\n1. Base Template\n   - Ortak HTML yapısı\n   - CSS ve JS dosyaları\n   - Header ve footer\n\n2. Block Sistemi\n   - {% block %}: İçerik alanları\n   - {% extends %}: Template kalıtımı\n   - {% include %}: Parça ekleme\n\n3. Template Etiketleri\n   - {% if %}: Koşullu içerik\n   - {% for %}: Döngüler\n   - {% with %}: Değişken tanımlama	91	704	4	\N	\N
143	Authentication	Django kimlik doğrulama sistemi, kullanıcı yönetimini sağlar.\n\nKullanıcı Yönetimi:\n1. User Model\n   - Kullanıcı bilgileri\n   - Grup ve izinler\n   - Şifre yönetimi\n\n2. Authentication Views\n   - Login/Logout işlemleri\n   - Şifre sıfırlama\n   - Kullanıcı kaydı\n\n3. Decorators\n   - @login_required: Giriş kontrolü\n   - @permission_required: İzin kontrolü\n   - @user_passes_test: Özel kontrol	91	705	4	\N	\N
144	User Management	Django kullanıcı yönetimi, hesap işlemlerini yönetir.\n\nKullanıcı İşlemleri:\n1. Hesap Yönetimi\n   - Kayıt olma\n   - Giriş/Çıkış\n   - Profil güncelleme\n\n2. Güvenlik\n   - Şifre hash'leme\n   - Session yönetimi\n   - Token authentication\n\n3. İzinler\n   - Grup bazlı izinler\n   - Kullanıcı bazlı izinler\n   - Özel izinler	91	705	4	\N	\N
145	Class Based Views	Django class based views, view'ları sınıf tabanlı tanımlar.\n\nTemel Sınıflar:\n1. View\n   - HTTP metodları\n   - Mixin'ler\n   - Özelleştirme\n\n2. Generic Views\n   - ListView\n   - DetailView\n   - CreateView\n   - UpdateView\n   - DeleteView	91	706	4	\N	\N
146	Generic Views	Django generic views, yaygın işlemler için hazır view'lar sunar.\n\nListView Özellikleri:\n• Pagination\n• Filtering\n• Sorting\n• Search\n\nDetailView Özellikleri:\n• Object retrieval\n• Context data\n• Template rendering	91	706	4	\N	\N
147	URL Yapılandırması	Django'da URL'ler, kullanıcı isteklerini doğru view'lara yönlendirir.\n\nURL Patterns:\n• path(): Basit URL eşleştirme\n• re_path(): Regex tabanlı eşleştirme\n• include(): URL'leri modüler hale getirme\n\nURL Parametreleri:\n• <int:pk>: Sayısal parametre\n• <str:slug>: Metin parametresi\n• <uuid:uuid>: UUID parametresi\n\nNamed URL Patterns:\n• {% url 'view_name' param %}: Template'de kullanım\n• reverse('view_name', args=[param]): View'da kullanım	96	772	5	\N	\N
148	View ve Template Sistemi	Django'da view'lar ve template'ler, web uygulamasının görünüm katmanını oluşturur.\n\nView Tipleri:\n1. Function Based Views\n   - Basit ve anlaşılır\n   - request parametresi\n   - HTTP yanıtı döndürme\n\n2. Class Based Views\n   - Kod tekrarını önleme\n   - Mixin'ler ile genişletme\n   - HTTP metodlarına göre işlem\n\nTemplate Özellikleri:\n• Değişken kullanımı: {{ variable }}\n• Tag'ler: {% tag %}\n• Filtreler: {{ variable|filter }}\n• Template inheritance	96	772	5	\N	\N
149	Django REST Framework	Django REST Framework, API geliştirmeyi kolaylaştırır.\n\nTemel Bileşenler:\n1. Serializers\n   - Model serialization\n   - Validation\n   - Nested data\n\n2. ViewSets\n   - CRUD operations\n   - Custom actions\n   - Permissions\n\n3. Routers\n   - URL patterns\n   - ViewSet mapping	96	777	5	\N	\N
150	API Tasarımı	REST API tasarımı, modern web uygulamaları için önemlidir.\n\nTemel Prensipler:\n• Resource-based URLs\n• HTTP metodları\n• Status codes\n• Authentication\n• Versioning	96	777	5	\N	\N
151	Middleware	Django middleware, request/response cycle'ını yönetir.\n\nTemel Middleware'ler:\n1. Authentication\n2. Session\n3. Security\n4. CSRF\n5. CORS\n\nCustom Middleware:\n• Request processing\n• Response processing\n• Error handling	96	778	5	\N	\N
152	Güvenlik	Django güvenlik önlemleri, web uygulamalarını korur.\n\nTemel Önlemler:\n• CSRF koruması\n• XSS koruması\n• SQL injection koruması\n• Clickjacking koruması\n• SSL/HTTPS	96	778	5	\N	\N
153	Model ve Veritabanı	Django'da veritabanı yönetimi model sınıfları ile yapılır.\n\nModel Yapısı:\n• Her model bir veritabanı tablosunu temsil eder\n• Alanlar tablo sütunlarını belirler\n• İlişkiler model sınıfları arasında kurulur\n\nVeritabanı İlişkileri:\n1. One-to-One\n   - Bir kayıt bir başka kayıtla eşleşir\n   - OneToOneField kullanılır\n   - Örnek: User ve Profile\n\n2. One-to-Many\n   - Bir kayıt birden çok kayıtla ilişkili\n   - ForeignKey kullanılır\n   - Örnek: Category ve Product\n\n3. Many-to-Many\n   - Kayıtlar çoklu ilişkiler kurar\n   - ManyToManyField kullanılır\n   - Örnek: Student ve Course	101	843	6	\N	\N
154	Django ORM	Django ORM, veritabanı işlemlerini Python nesneleri üzerinden yapar.\n\nSorgu Yapısı:\n1. Temel Sorgular\n   - all(): Tüm kayıtları getirir\n   - filter(): Koşullu filtreleme\n   - exclude(): Hariç tutma\n   - get(): Tek kayıt getirme\n\n2. İlişkisel Sorgular\n   - select_related(): Foreign key ilişkileri\n   - prefetch_related(): Many-to-many ilişkileri\n   - values(): Belirli alanları seçme\n\n3. Sorgu Optimizasyonu\n   - only(): Belirli alanları seçme\n   - defer(): Belirli alanları erteleme\n   - using(): Veritabanı seçimi	101	843	6	\N	\N
155	Form İşlemleri	Django form sistemi, kullanıcı etkileşimini yönetir.\n\nForm Yapısı:\n1. ModelForm\n   - Model ile otomatik form oluşturma\n   - CRUD işlemleri için hazır\n   - Validasyon kuralları otomatik\n\n2. Form\n   - Özel form alanları\n   - Manuel validasyon\n   - Esnek yapı\n\nForm Alanları:\n• CharField: Metin girişi\n• EmailField: E-posta girişi\n• DateField: Tarih seçimi\n• ChoiceField: Seçim listesi\n• FileField: Dosya yükleme	101	844	6	\N	\N
156	Template Inheritance	Django template sistemi, HTML şablonlarını yönetir.\n\nTemplate Yapısı:\n1. Base Template\n   - Ortak HTML yapısı\n   - CSS ve JS dosyaları\n   - Header ve footer\n\n2. Block Sistemi\n   - {% block %}: İçerik alanları\n   - {% extends %}: Template kalıtımı\n   - {% include %}: Parça ekleme\n\n3. Template Etiketleri\n   - {% if %}: Koşullu içerik\n   - {% for %}: Döngüler\n   - {% with %}: Değişken tanımlama	101	844	6	\N	\N
157	Django Signals	Django signals, olay tabanlı programlamayı sağlar.\n\nTemel Signal'lar:\n• post_save\n• pre_save\n• post_delete\n• pre_delete\n\nSignal Kullanımı:\n• Signal tanımlama\n• Receiver fonksiyonları\n• Signal gönderme	101	849	6	\N	\N
158	Custom Signals	Custom signal'lar, özel olaylar tanımlar.\n\nSignal Özellikleri:\n• Asenkron çalışma\n• Hata toleransı\n• Modüler yapı\n• Event handling	101	849	6	\N	\N
159	Form İşlemleri	Django form sistemi, kullanıcı etkileşimini yönetir.\n\nForm Yapısı:\n1. ModelForm\n   - Model ile otomatik form oluşturma\n   - CRUD işlemleri için hazır\n   - Validasyon kuralları otomatik\n\n2. Form\n   - Özel form alanları\n   - Manuel validasyon\n   - Esnek yapı\n\nForm Alanları:\n• CharField: Metin girişi\n• EmailField: E-posta girişi\n• DateField: Tarih seçimi\n• ChoiceField: Seçim listesi\n• FileField: Dosya yükleme	106	914	7	\N	\N
160	Template Inheritance	Django template sistemi, HTML şablonlarını yönetir.\n\nTemplate Yapısı:\n1. Base Template\n   - Ortak HTML yapısı\n   - CSS ve JS dosyaları\n   - Header ve footer\n\n2. Block Sistemi\n   - {% block %}: İçerik alanları\n   - {% extends %}: Template kalıtımı\n   - {% include %}: Parça ekleme\n\n3. Template Etiketleri\n   - {% if %}: Koşullu içerik\n   - {% for %}: Döngüler\n   - {% with %}: Değişken tanımlama	106	914	7	\N	\N
161	Authentication	Django kimlik doğrulama sistemi, kullanıcı yönetimini sağlar.\n\nKullanıcı Yönetimi:\n1. User Model\n   - Kullanıcı bilgileri\n   - Grup ve izinler\n   - Şifre yönetimi\n\n2. Authentication Views\n   - Login/Logout işlemleri\n   - Şifre sıfırlama\n   - Kullanıcı kaydı\n\n3. Decorators\n   - @login_required: Giriş kontrolü\n   - @permission_required: İzin kontrolü\n   - @user_passes_test: Özel kontrol	106	915	7	\N	\N
162	User Management	Django kullanıcı yönetimi, hesap işlemlerini yönetir.\n\nKullanıcı İşlemleri:\n1. Hesap Yönetimi\n   - Kayıt olma\n   - Giriş/Çıkış\n   - Profil güncelleme\n\n2. Güvenlik\n   - Şifre hash'leme\n   - Session yönetimi\n   - Token authentication\n\n3. İzinler\n   - Grup bazlı izinler\n   - Kullanıcı bazlı izinler\n   - Özel izinler	106	915	7	\N	\N
163	Django Deployment	Django deployment, uygulamayı production'a taşır.\n\nDeployment Adımları:\n1. Environment\n   - Debug mode\n   - Secret key\n   - Allowed hosts\n\n2. Static/Media Files\n   - collectstatic\n   - CDN\n   - Storage\n\n3. Database\n   - Migration\n   - Backup\n   - Optimization	106	920	7	\N	\N
164	Performance Optimization	Django performans optimizasyonu, uygulama hızını artırır.\n\nOptimizasyon Alanları:\n• Database queries\n• Caching\n• Template rendering\n• Static files\n• Code profiling	106	920	7	\N	\N
165	Model ve Veritabanı	Django'da veritabanı yönetimi model sınıfları ile yapılır.\n\nModel Yapısı:\n• Her model bir veritabanı tablosunu temsil eder\n• Alanlar tablo sütunlarını belirler\n• İlişkiler model sınıfları arasında kurulur\n\nVeritabanı İlişkileri:\n1. One-to-One\n   - Bir kayıt bir başka kayıtla eşleşir\n   - OneToOneField kullanılır\n   - Örnek: User ve Profile\n\n2. One-to-Many\n   - Bir kayıt birden çok kayıtla ilişkili\n   - ForeignKey kullanılır\n   - Örnek: Category ve Product\n\n3. Many-to-Many\n   - Kayıtlar çoklu ilişkiler kurar\n   - ManyToManyField kullanılır\n   - Örnek: Student ve Course	111	983	8	\N	\N
166	Django ORM	Django ORM, veritabanı işlemlerini Python nesneleri üzerinden yapar.\n\nSorgu Yapısı:\n1. Temel Sorgular\n   - all(): Tüm kayıtları getirir\n   - filter(): Koşullu filtreleme\n   - exclude(): Hariç tutma\n   - get(): Tek kayıt getirme\n\n2. İlişkisel Sorgular\n   - select_related(): Foreign key ilişkileri\n   - prefetch_related(): Many-to-many ilişkileri\n   - values(): Belirli alanları seçme\n\n3. Sorgu Optimizasyonu\n   - only(): Belirli alanları seçme\n   - defer(): Belirli alanları erteleme\n   - using(): Veritabanı seçimi	111	983	8	\N	\N
167	Class Based Views	Django class based views, view'ları sınıf tabanlı tanımlar.\n\nTemel Sınıflar:\n1. View\n   - HTTP metodları\n   - Mixin'ler\n   - Özelleştirme\n\n2. Generic Views\n   - ListView\n   - DetailView\n   - CreateView\n   - UpdateView\n   - DeleteView	111	986	8	\N	\N
168	Generic Views	Django generic views, yaygın işlemler için hazır view'lar sunar.\n\nListView Özellikleri:\n• Pagination\n• Filtering\n• Sorting\n• Search\n\nDetailView Özellikleri:\n• Object retrieval\n• Context data\n• Template rendering	111	986	8	\N	\N
169	Middleware	Django middleware, request/response cycle'ını yönetir.\n\nTemel Middleware'ler:\n1. Authentication\n2. Session\n3. Security\n4. CSRF\n5. CORS\n\nCustom Middleware:\n• Request processing\n• Response processing\n• Error handling	111	988	8	\N	\N
170	Güvenlik	Django güvenlik önlemleri, web uygulamalarını korur.\n\nTemel Önlemler:\n• CSRF koruması\n• XSS koruması\n• SQL injection koruması\n• Clickjacking koruması\n• SSL/HTTPS	111	988	8	\N	\N
171	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	120	1107	1	\N	\N
172	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	120	1107	1	\N	\N
173	Docker Temelleri	Docker, uygulamaları konteynerler içinde paketleyen bir platformdur.\n\nDocker Bileşenleri:\n1. Docker Engine\n   - Konteyner çalıştırma\n   - İmaj yönetimi\n   - Ağ yapılandırması\n\n2. Docker Images\n   - Katmanlı yapı\n   - İmaj oluşturma\n   - İmaj paylaşımı\n\n3. Docker Containers\n   - İzole ortamlar\n   - Kaynak sınırlama\n   - Port yönlendirme	120	1108	1	\N	\N
174	Docker Komutları	Docker'ı yönetmek için temel komutlar.\n\nTemel Komutlar:\n1. İmaj Yönetimi\n   - docker pull: İmaj indirme\n   - docker build: İmaj oluşturma\n   - docker images: İmaj listeleme\n\n2. Konteyner Yönetimi\n   - docker run: Konteyner başlatma\n   - docker ps: Konteyner listeleme\n   - docker stop: Konteyner durdurma\n\n3. Sistem Yönetimi\n   - docker system prune: Temizlik\n   - docker network: Ağ yönetimi\n   - docker volume: Veri yönetimi	120	1108	1	\N	\N
175	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını tanımlayan metin dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build argümanları\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	120	1109	1	\N	\N
176	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetir.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	120	1109	1	\N	\N
177	AWS Temel Servisleri	Amazon Web Services, kapsamlı bulut hizmetleri sunar.\n\nTemel Servisler:\n1. EC2 (Elastic Compute Cloud)\n   - Sanal sunucular\n   - Örnek tipleri\n   - Otomatik ölçeklendirme\n\n2. S3 (Simple Storage Service)\n   - Nesne depolama\n   - Bucket yönetimi\n   - Erişim kontrolü\n\n3. RDS (Relational Database Service)\n   - Veritabanı hizmetleri\n   - Yedekleme\n   - Yüksek erişilebilirlik	120	1110	1	\N	\N
178	AWS Güvenlik	AWS güvenlik hizmetleri, bulut kaynaklarını korur.\n\nGüvenlik Özellikleri:\n1. IAM (Identity and Access Management)\n   - Kullanıcı yönetimi\n   - Rol tabanlı erişim\n   - Politika tanımları\n\n2. VPC (Virtual Private Cloud)\n   - Ağ izolasyonu\n   - Alt ağ yapılandırması\n   - Güvenlik grupları\n\n3. KMS (Key Management Service)\n   - Şifreleme anahtarları\n   - Sertifika yönetimi\n   - Güvenli depolama	120	1110	1	\N	\N
179	Kubernetes Temelleri	Kubernetes, konteyner orkestrasyon platformudur.\n\nTemel Kavramlar:\n1. Pod'lar\n   - En küçük dağıtım birimi\n   - Konteyner grupları\n   - Paylaşılan kaynaklar\n\n2. Servisler\n   - Load balancing\n   - Servis keşfi\n   - DNS entegrasyonu\n\n3. Deployment'lar\n   - Replica set'ler\n   - Rolling updates\n   - Rollback işlemleri	120	1111	1	\N	\N
180	Kubernetes Yönetimi	Kubernetes cluster yönetimi ve kaynak kontrolü.\n\nYönetim Özellikleri:\n1. Namespace'ler\n   - Kaynak izolasyonu\n   - Erişim kontrolü\n   - Kotalar\n\n2. ConfigMap ve Secret\n   - Yapılandırma yönetimi\n   - Hassas veri saklama\n   - Ortam değişkenleri\n\n3. Resource Quotas\n   - CPU limitleri\n   - Bellek sınırları\n   - Depolama kotaları	120	1111	1	\N	\N
181	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım süreçleri.\n\nPipeline Bileşenleri:\n1. Kaynak Kod Yönetimi\n   - Git entegrasyonu\n   - Branch stratejileri\n   - Code review\n\n2. Build ve Test\n   - Otomatik derleme\n   - Unit testler\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback mekanizması	120	1112	1	\N	\N
182	Jenkins ve GitLab CI	CI/CD araçları ve kullanımları.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin sistemi\n   - Distributed builds\n\n2. GitLab CI\n   - .gitlab-ci.yml\n   - Runner'lar\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	120	1112	1	\N	\N
183	Mikroservis Mimarisi	Mikroservisler, uygulamaları küçük bağımsız servislere böler.\n\nMimari Özellikler:\n1. Servis Tasarımı\n   - Domain-driven design\n   - Bounded context\n   - API tasarımı\n\n2. İletişim\n   - REST API'ler\n   - Message queues\n   - Event-driven mimari\n\n3. Veri Yönetimi\n   - Database per service\n   - Event sourcing\n   - CQRS pattern	120	1113	1	\N	\N
184	Servis Mesh	Servis mesh, mikroservisler arası iletişimi yönetir.\n\nMesh Özellikleri:\n1. Trafik Yönetimi\n   - Load balancing\n   - Circuit breaking\n   - Retry politikaları\n\n2. Güvenlik\n   - mTLS\n   - Yetkilendirme\n   - Rate limiting\n\n3. Observability\n   - Distributed tracing\n   - Metrics\n   - Logging	120	1113	1	\N	\N
185	Cloud Native Uygulamalar	Cloud native, bulut ortamına özel uygulama geliştirme.\n\nTemel Prensipler:\n1. 12-Factor App\n   - Konfigürasyon\n   - Bağımlılıklar\n   - Loglar\n\n2. Container Best Practices\n   - İmaj optimizasyonu\n   - Güvenlik taraması\n   - Kaynak limitleri\n\n3. Cloud Native Tools\n   - Service mesh\n   - API gateway\n   - Service discovery	120	1114	1	\N	\N
186	Serverless Computing	Serverless, sunucu yönetimi olmadan kod çalıştırma.\n\nServerless Özellikleri:\n1. FaaS (Functions as a Service)\n   - Event-driven\n   - Otomatik ölçeklendirme\n   - Pay-per-use\n\n2. BaaS (Backend as a Service)\n   - Authentication\n   - Database\n   - Storage\n\n3. Kullanım Senaryoları\n   - API endpoints\n   - Event processing\n   - Scheduled tasks	120	1114	1	\N	\N
187	Cloud Security	Bulut güvenliği ve en iyi uygulamalar.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Security groups\n   - Network ACLs\n\n2. Data Security\n   - Encryption\n   - Key management\n   - Data classification\n\n3. Identity Security\n   - MFA\n   - Role-based access\n   - Audit logging	120	1115	1	\N	\N
188	Compliance ve Governance	Bulut uyumluluk ve yönetişim standartları.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama\n\n3. HIPAA\n   - Sağlık verisi\n   - Gizlilik\n   - Güvenlik önlemleri	120	1115	1	\N	\N
189	Cloud Cost Optimization	Bulut maliyet optimizasyonu stratejileri.\n\nOptimizasyon Alanları:\n1. Resource Management\n   - Right-sizing\n   - Reserved instances\n   - Spot instances\n\n2. Storage Optimization\n   - Lifecycle policies\n   - Data tiering\n   - Compression\n\n3. Monitoring ve Analytics\n   - Cost allocation\n   - Usage patterns\n   - Budget alerts	120	1116	1	\N	\N
190	Disaster Recovery	Felaket kurtarma planlaması ve uygulaması.\n\nDR Stratejileri:\n1. Backup Stratejileri\n   - Cross-region backup\n   - Point-in-time recovery\n   - Backup testing\n\n2. Recovery Planları\n   - RTO ve RPO\n   - Failover testing\n   - Documentation\n\n3. High Availability\n   - Multi-AZ deployment\n   - Load balancing\n   - Auto-scaling	120	1116	1	\N	\N
191	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	85	617	2	\N	\N
192	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	85	617	2	\N	\N
193	Docker Temelleri	Docker, uygulamaların taşınabilir ve izole ortamlarda çalışmasını sağlayan bir konteyner platformudur.\n\nBaşlıca Bileşenler:\n1. Docker Engine\n   - Konteynerleri başlatır ve yönetir\n   - İmajları çalıştırır\n   - Ağ yapılandırmasını sağlar\n\n2. Docker Images\n   - Katmanlardan oluşur\n   - Farklı uygulamalar için temel oluşturur\n   - Kendi imajınızı oluşturabilirsiniz\n\n3. Docker Containers\n   - İzole edilmiş çalışma ortamlarıdır\n   - Kaynak kullanımı sınırlandırılabilir\n   - Portlar dış dünyaya açılabilir	85	618	2	\N	\N
194	Docker Komutları	Docker ile çalışırken kullanılan temel komutlar şunlardır:\n\nİmaj Komutları:\n1. docker pull: Kayıtlı bir imajı indirir\n2. docker build: Dockerfile'dan yeni bir imaj oluşturur\n3. docker images: Mevcut imajları listeler\n\nKonteyner Komutları:\n1. docker run: Yeni bir konteyner başlatır\n2. docker ps: Çalışan konteynerleri gösterir\n3. docker stop: Bir konteyneri durdurur\n\nSistem Komutları:\n1. docker system prune: Kullanılmayan kaynakları temizler\n2. docker network: Ağları yönetir\n3. docker volume: Kalıcı verileri yönetir	85	618	2	\N	\N
195	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını tanımlayan metin dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build argümanları\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	85	619	2	\N	\N
196	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetir.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	85	619	2	\N	\N
197	AWS Temel Servisleri	Amazon Web Services (AWS), bulut üzerinde çok çeşitli hizmetler sunar.\n\nBaşlıca Servisler:\n1. EC2\n   - Sanal makineler sağlar\n   - Farklı instance tipleri sunar\n   - Otomatik ölçeklendirme desteği vardır\n\n2. S3\n   - Nesne tabanlı depolama sunar\n   - Bucket yapısı ile dosya yönetimi\n   - Erişim izinleri ayarlanabilir\n\n3. RDS\n   - Yönetilen veritabanı hizmeti\n   - Otomatik yedekleme\n   - Yüksek erişilebilirlik sağlar	85	620	2	\N	\N
198	AWS Güvenlik	AWS'de güvenlik, kaynakların korunması için çeşitli araçlar sunar.\n\nGüvenlik Araçları:\n1. IAM\n   - Kullanıcı ve rol yönetimi\n   - Ayrıntılı erişim politikaları\n   - Çok faktörlü kimlik doğrulama\n\n2. VPC\n   - Sanal ağ oluşturma\n   - Alt ağlar ve güvenlik grupları\n   - Trafik kontrolü\n\n3. KMS\n   - Anahtar yönetimi\n   - Şifreleme işlemleri\n   - Güvenli veri saklama	85	620	2	\N	\N
199	Kubernetes Temelleri	Kubernetes, konteyner tabanlı uygulamaların otomatik yönetimi için geliştirilmiş bir platformdur.\n\nTemel Kavramlar:\n1. Pod\n   - Bir veya daha fazla konteyner içerir\n   - Ortak kaynakları paylaşır\n   - En küçük dağıtım birimidir\n\n2. Service\n   - Yük dengeleme sağlar\n   - Servis keşfi sunar\n   - DNS ile entegre çalışır\n\n3. Deployment\n   - Uygulama güncellemelerini yönetir\n   - Otomatik ölçeklendirme\n   - Rollback desteği	85	621	2	\N	\N
200	Kubernetes Yönetimi	Kubernetes'te kaynak ve yapılandırma yönetimi önemlidir.\n\nYönetim Araçları:\n1. Namespace\n   - Kaynakları izole eder\n   - Farklı ekipler için ayrım sağlar\n   - Kotalar belirlenebilir\n\n2. ConfigMap ve Secret\n   - Uygulama ayarlarını saklar\n   - Hassas bilgileri şifreler\n   - Ortam değişkenleri sağlar\n\n3. Resource Quota\n   - CPU ve bellek sınırları\n   - Depolama kısıtlamaları\n   - Kaynak kullanımını kontrol eder	85	621	2	\N	\N
201	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım süreçleri.\n\nPipeline Bileşenleri:\n1. Kaynak Kod Yönetimi\n   - Git entegrasyonu\n   - Branch stratejileri\n   - Code review\n\n2. Build ve Test\n   - Otomatik derleme\n   - Unit testler\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback mekanizması	85	622	2	\N	\N
202	Jenkins ve GitLab CI	CI/CD araçları ve kullanımları.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin sistemi\n   - Distributed builds\n\n2. GitLab CI\n   - .gitlab-ci.yml\n   - Runner'lar\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	85	622	2	\N	\N
203	Mikroservis Mimarisi	Mikroservisler, uygulamaları küçük bağımsız servislere böler.\n\nMimari Özellikler:\n1. Servis Tasarımı\n   - Domain-driven design\n   - Bounded context\n   - API tasarımı\n\n2. İletişim\n   - REST API'ler\n   - Message queues\n   - Event-driven mimari\n\n3. Veri Yönetimi\n   - Database per service\n   - Event sourcing\n   - CQRS pattern	85	623	2	\N	\N
204	Servis Mesh	Servis mesh, mikroservisler arası iletişimi yönetir.\n\nMesh Özellikleri:\n1. Trafik Yönetimi\n   - Load balancing\n   - Circuit breaking\n   - Retry politikaları\n\n2. Güvenlik\n   - mTLS\n   - Yetkilendirme\n   - Rate limiting\n\n3. Observability\n   - Distributed tracing\n   - Metrics\n   - Logging	85	623	2	\N	\N
205	Cloud Native Uygulamalar	Cloud native, bulut ortamına özel uygulama geliştirme.\n\nTemel Prensipler:\n1. 12-Factor App\n   - Konfigürasyon\n   - Bağımlılıklar\n   - Loglar\n\n2. Container Best Practices\n   - İmaj optimizasyonu\n   - Güvenlik taraması\n   - Kaynak limitleri\n\n3. Cloud Native Tools\n   - Service mesh\n   - API gateway\n   - Service discovery	85	624	2	\N	\N
206	Serverless Computing	Serverless, sunucu yönetimi olmadan kod çalıştırma.\n\nServerless Özellikleri:\n1. FaaS (Functions as a Service)\n   - Event-driven\n   - Otomatik ölçeklendirme\n   - Pay-per-use\n\n2. BaaS (Backend as a Service)\n   - Authentication\n   - Database\n   - Storage\n\n3. Kullanım Senaryoları\n   - API endpoints\n   - Event processing\n   - Scheduled tasks	85	624	2	\N	\N
207	Cloud Security	Bulut güvenliği ve en iyi uygulamalar.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Security groups\n   - Network ACLs\n\n2. Data Security\n   - Encryption\n   - Key management\n   - Data classification\n\n3. Identity Security\n   - MFA\n   - Role-based access\n   - Audit logging	85	625	2	\N	\N
208	Compliance ve Governance	Bulut uyumluluk ve yönetişim standartları.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama\n\n3. HIPAA\n   - Sağlık verisi\n   - Gizlilik\n   - Güvenlik önlemleri	85	625	2	\N	\N
209	Cloud Cost Optimization	Bulut maliyet optimizasyonu stratejileri.\n\nOptimizasyon Alanları:\n1. Resource Management\n   - Right-sizing\n   - Reserved instances\n   - Spot instances\n\n2. Storage Optimization\n   - Lifecycle policies\n   - Data tiering\n   - Compression\n\n3. Monitoring ve Analytics\n   - Cost allocation\n   - Usage patterns\n   - Budget alerts	85	626	2	\N	\N
210	Disaster Recovery	Felaket kurtarma planlaması ve uygulaması.\n\nDR Stratejileri:\n1. Backup Stratejileri\n   - Cross-region backup\n   - Point-in-time recovery\n   - Backup testing\n\n2. Recovery Planları\n   - RTO ve RPO\n   - Failover testing\n   - Documentation\n\n3. High Availability\n   - Multi-AZ deployment\n   - Load balancing\n   - Auto-scaling	85	626	2	\N	\N
211	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	86	631	3	\N	\N
212	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	86	631	3	\N	\N
213	Docker Temelleri	Docker, uygulamaların konteynerler içinde çalışmasını sağlayan modern bir platformdur.\n\nAna Bileşenler:\n1. Docker Engine\n   - Konteyner yaşam döngüsünü yönetir\n   - İmajları çalıştırır ve yönetir\n   - Ağ ve depolama kaynaklarını sağlar\n\n2. Docker Images\n   - Uygulama ve bağımlılıkları içerir\n   - Katmanlı mimari kullanır\n   - Paylaşılabilir ve yeniden kullanılabilir\n\n3. Docker Containers\n   - İzole çalışma ortamları\n   - Kaynak kullanımı kontrol edilebilir\n   - Ağ bağlantıları yapılandırılabilir	86	632	3	\N	\N
214	Docker Komutları	Docker ile çalışırken kullanmanız gereken temel komutlar:\n\nİmaj İşlemleri:\n1. docker pull: Uzak kayıttan imaj çeker\n2. docker build: Dockerfile'dan imaj oluşturur\n3. docker images: Yerel imajları listeler\n\nKonteyner İşlemleri:\n1. docker run: Konteyner başlatır\n2. docker ps: Aktif konteynerleri gösterir\n3. docker stop: Konteyner durdurur\n\nSistem İşlemleri:\n1. docker system prune: Gereksiz kaynakları temizler\n2. docker network: Ağ yapılandırması\n3. docker volume: Veri depolama yönetimi	86	632	3	\N	\N
215	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını tanımlayan metin dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build argümanları\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	86	633	3	\N	\N
216	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetir.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	86	633	3	\N	\N
217	AWS Temel Servisleri	Amazon Web Services (AWS), bulut üzerinde çok çeşitli hizmetler sunar.\n\nBaşlıca Servisler:\n1. EC2\n   - Sanal makineler sağlar\n   - Farklı instance tipleri sunar\n   - Otomatik ölçeklendirme desteği vardır\n\n2. S3\n   - Nesne tabanlı depolama sunar\n   - Bucket yapısı ile dosya yönetimi\n   - Erişim izinleri ayarlanabilir\n\n3. RDS\n   - Yönetilen veritabanı hizmeti\n   - Otomatik yedekleme\n   - Yüksek erişilebilirlik sağlar	86	634	3	\N	\N
218	AWS Güvenlik	AWS'de güvenlik, kaynakların korunması için çeşitli araçlar sunar.\n\nGüvenlik Araçları:\n1. IAM\n   - Kullanıcı ve rol yönetimi\n   - Ayrıntılı erişim politikaları\n   - Çok faktörlü kimlik doğrulama\n\n2. VPC\n   - Sanal ağ oluşturma\n   - Alt ağlar ve güvenlik grupları\n   - Trafik kontrolü\n\n3. KMS\n   - Anahtar yönetimi\n   - Şifreleme işlemleri\n   - Güvenli veri saklama	86	634	3	\N	\N
219	Kubernetes Temelleri	Kubernetes, konteyner tabanlı uygulamaların otomatik yönetimi için geliştirilmiş bir platformdur.\n\nTemel Kavramlar:\n1. Pod\n   - Bir veya daha fazla konteyner içerir\n   - Ortak kaynakları paylaşır\n   - En küçük dağıtım birimidir\n\n2. Service\n   - Yük dengeleme sağlar\n   - Servis keşfi sunar\n   - DNS ile entegre çalışır\n\n3. Deployment\n   - Uygulama güncellemelerini yönetir\n   - Otomatik ölçeklendirme\n   - Rollback desteği	86	635	3	\N	\N
220	Kubernetes Yönetimi	Kubernetes'te kaynak ve yapılandırma yönetimi önemlidir.\n\nYönetim Araçları:\n1. Namespace\n   - Kaynakları izole eder\n   - Farklı ekipler için ayrım sağlar\n   - Kotalar belirlenebilir\n\n2. ConfigMap ve Secret\n   - Uygulama ayarlarını saklar\n   - Hassas bilgileri şifreler\n   - Ortam değişkenleri sağlar\n\n3. Resource Quota\n   - CPU ve bellek sınırları\n   - Depolama kısıtlamaları\n   - Kaynak kullanımını kontrol eder	86	635	3	\N	\N
221	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım süreçleri.\n\nPipeline Bileşenleri:\n1. Kaynak Kod Yönetimi\n   - Git entegrasyonu\n   - Branch stratejileri\n   - Code review\n\n2. Build ve Test\n   - Otomatik derleme\n   - Unit testler\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback mekanizması	86	636	3	\N	\N
222	Jenkins ve GitLab CI	CI/CD araçları ve kullanımları.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin sistemi\n   - Distributed builds\n\n2. GitLab CI\n   - .gitlab-ci.yml\n   - Runner'lar\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	86	636	3	\N	\N
223	Mikroservis Mimarisi	Mikroservis mimarisi, uygulamaları küçük, bağımsız servislere bölen bir yaklaşımdır.\n\nMimari Özellikler:\n1. Servis Tasarımı\n   - Her servis tek bir sorumluluk taşır\n   - Servisler bağımsız dağıtılabilir\n   - API'ler ile iletişim kurar\n\n2. İletişim Mekanizmaları\n   - REST API'ler\n   - Message broker'lar\n   - Event-driven iletişim\n\n3. Veri Yönetimi\n   - Her servis kendi veritabanına sahip\n   - Event sourcing\n   - CQRS pattern	86	637	3	\N	\N
224	Servis Mesh	Servis mesh, mikroservisler arasındaki iletişimi yöneten bir altyapı katmanıdır.\n\nTemel Özellikler:\n1. Trafik Yönetimi\n   - Yük dengeleme\n   - Circuit breaking\n   - Retry mekanizmaları\n\n2. Güvenlik\n   - mTLS şifreleme\n   - Yetkilendirme\n   - Rate limiting\n\n3. İzlenebilirlik\n   - Dağıtık izleme\n   - Metrik toplama\n   - Log yönetimi	86	637	3	\N	\N
225	Cloud Native Uygulamalar	Cloud native uygulamalar, bulut ortamına özel olarak tasarlanmış yazılımlardır.\n\nTemel Prensipler:\n1. 12-Factor App\n   - Konfigürasyon yönetimi\n   - Bağımlılık yönetimi\n   - Log yönetimi\n\n2. Konteyner Best Practices\n   - İmaj optimizasyonu\n   - Güvenlik taraması\n   - Kaynak limitleri\n\n3. Cloud Native Araçlar\n   - Service mesh\n   - API gateway\n   - Service discovery	86	638	3	\N	\N
226	Serverless Computing	Serverless, sunucu yönetimi olmadan kod çalıştırma modelidir.\n\nÖzellikler:\n1. FaaS\n   - Event-driven çalışma\n   - Otomatik ölçeklendirme\n   - Kullanım bazlı ödeme\n\n2. BaaS\n   - Kimlik doğrulama\n   - Veritabanı hizmetleri\n   - Depolama çözümleri\n\n3. Kullanım Alanları\n   - API endpoint'leri\n   - Event işleme\n   - Zamanlanmış görevler	86	638	3	\N	\N
227	Cloud Security	Bulut güvenliği ve en iyi uygulamalar.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Security groups\n   - Network ACLs\n\n2. Data Security\n   - Encryption\n   - Key management\n   - Data classification\n\n3. Identity Security\n   - MFA\n   - Role-based access\n   - Audit logging	86	639	3	\N	\N
228	Compliance ve Governance	Bulut uyumluluk ve yönetişim standartları.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama\n\n3. HIPAA\n   - Sağlık verisi\n   - Gizlilik\n   - Güvenlik önlemleri	86	639	3	\N	\N
229	Cloud Cost Optimization	Bulut maliyet optimizasyonu stratejileri.\n\nOptimizasyon Alanları:\n1. Resource Management\n   - Right-sizing\n   - Reserved instances\n   - Spot instances\n\n2. Storage Optimization\n   - Lifecycle policies\n   - Data tiering\n   - Compression\n\n3. Monitoring ve Analytics\n   - Cost allocation\n   - Usage patterns\n   - Budget alerts	86	640	3	\N	\N
230	Disaster Recovery	Felaket kurtarma planlaması ve uygulaması.\n\nDR Stratejileri:\n1. Backup Stratejileri\n   - Cross-region backup\n   - Point-in-time recovery\n   - Backup testing\n\n2. Recovery Planları\n   - RTO ve RPO\n   - Failover testing\n   - Documentation\n\n3. High Availability\n   - Multi-AZ deployment\n   - Load balancing\n   - Auto-scaling	86	640	3	\N	\N
231	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	91	701	4	\N	\N
232	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	91	701	4	\N	\N
233	Docker Temelleri	Docker, uygulamaların konteynerler içinde çalışmasını sağlayan modern bir platformdur.\n\nAna Bileşenler:\n1. Docker Engine\n   - Konteyner yaşam döngüsünü yönetir\n   - İmajları çalıştırır ve yönetir\n   - Ağ ve depolama kaynaklarını sağlar\n\n2. Docker Images\n   - Uygulama ve bağımlılıkları içerir\n   - Katmanlı mimari kullanır\n   - Paylaşılabilir ve yeniden kullanılabilir\n\n3. Docker Containers\n   - İzole çalışma ortamları\n   - Kaynak kullanımı kontrol edilebilir\n   - Ağ bağlantıları yapılandırılabilir	91	702	4	\N	\N
234	Docker Komutları	Docker ile çalışırken kullanmanız gereken temel komutlar:\n\nİmaj İşlemleri:\n1. docker pull: Uzak kayıttan imaj çeker\n2. docker build: Dockerfile'dan imaj oluşturur\n3. docker images: Yerel imajları listeler\n\nKonteyner İşlemleri:\n1. docker run: Konteyner başlatır\n2. docker ps: Aktif konteynerleri gösterir\n3. docker stop: Konteyner durdurur\n\nSistem İşlemleri:\n1. docker system prune: Gereksiz kaynakları temizler\n2. docker network: Ağ yapılandırması\n3. docker volume: Veri depolama yönetimi	91	702	4	\N	\N
235	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını tanımlayan metin dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build argümanları\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	91	703	4	\N	\N
236	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetir.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	91	703	4	\N	\N
237	AWS Temel Servisleri	Amazon Web Services, bulut tabanlı çözümler sunan kapsamlı bir platformdur.\n\nÖnemli Servisler:\n1. EC2\n   - Sanal sunucu hizmeti\n   - Çeşitli instance tipleri\n   - Esnek ölçeklendirme\n\n2. S3\n   - Nesne depolama sistemi\n   - Yüksek dayanıklılık\n   - Kolay erişim kontrolü\n\n3. RDS\n   - Yönetilen veritabanı\n   - Otomatik yedekleme\n   - Yüksek erişilebilirlik	91	704	4	\N	\N
238	AWS Güvenlik	AWS platformunda güvenlik, çok katmanlı bir yaklaşımla sağlanır.\n\nGüvenlik Katmanları:\n1. IAM\n   - Kullanıcı ve grup yönetimi\n   - Rol tabanlı erişim kontrolü\n   - Güvenlik politikaları\n\n2. VPC\n   - Özel ağ oluşturma\n   - Güvenlik duvarı kuralları\n   - Ağ izolasyonu\n\n3. KMS\n   - Şifreleme anahtarı yönetimi\n   - Güvenli veri saklama\n   - Sertifika yönetimi	91	704	4	\N	\N
239	Kubernetes Temelleri	Kubernetes, konteyner tabanlı uygulamaların otomatik yönetimi için geliştirilmiş bir platformdur.\n\nTemel Kavramlar:\n1. Pod\n   - Bir veya daha fazla konteyner içerir\n   - Ortak kaynakları paylaşır\n   - En küçük dağıtım birimidir\n\n2. Service\n   - Yük dengeleme sağlar\n   - Servis keşfi sunar\n   - DNS ile entegre çalışır\n\n3. Deployment\n   - Uygulama güncellemelerini yönetir\n   - Otomatik ölçeklendirme\n   - Rollback desteği	91	705	4	\N	\N
240	Kubernetes Yönetimi	Kubernetes'te kaynak ve yapılandırma yönetimi önemlidir.\n\nYönetim Araçları:\n1. Namespace\n   - Kaynakları izole eder\n   - Farklı ekipler için ayrım sağlar\n   - Kotalar belirlenebilir\n\n2. ConfigMap ve Secret\n   - Uygulama ayarlarını saklar\n   - Hassas bilgileri şifreler\n   - Ortam değişkenleri sağlar\n\n3. Resource Quota\n   - CPU ve bellek sınırları\n   - Depolama kısıtlamaları\n   - Kaynak kullanımını kontrol eder	91	705	4	\N	\N
241	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım, yazılım geliştirme sürecini otomatize eder.\n\nPipeline Aşamaları:\n1. Kaynak Kod Yönetimi\n   - Versiyon kontrolü\n   - Branch stratejileri\n   - Code review süreci\n\n2. Build ve Test\n   - Otomatik derleme\n   - Birim testleri\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback stratejisi	91	706	4	\N	\N
242	Jenkins ve GitLab CI	CI/CD araçları, yazılım geliştirme sürecini otomatize eder.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin desteği\n   - Dağıtık build sistemi\n\n2. GitLab CI\n   - YAML tabanlı konfigürasyon\n   - Runner yönetimi\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	91	706	4	\N	\N
243	Mikroservis Mimarisi	Mikroservis mimarisi, uygulamaları küçük, bağımsız servislere bölen bir yaklaşımdır.\n\nMimari Özellikler:\n1. Servis Tasarımı\n   - Her servis tek bir sorumluluk taşır\n   - Servisler bağımsız dağıtılabilir\n   - API'ler ile iletişim kurar\n\n2. İletişim Mekanizmaları\n   - REST API'ler\n   - Message broker'lar\n   - Event-driven iletişim\n\n3. Veri Yönetimi\n   - Her servis kendi veritabanına sahip\n   - Event sourcing\n   - CQRS pattern	91	707	4	\N	\N
244	Servis Mesh	Servis mesh, mikroservisler arasındaki iletişimi yöneten bir altyapı katmanıdır.\n\nTemel Özellikler:\n1. Trafik Yönetimi\n   - Yük dengeleme\n   - Circuit breaking\n   - Retry mekanizmaları\n\n2. Güvenlik\n   - mTLS şifreleme\n   - Yetkilendirme\n   - Rate limiting\n\n3. İzlenebilirlik\n   - Dağıtık izleme\n   - Metrik toplama\n   - Log yönetimi	91	707	4	\N	\N
245	Cloud Native Uygulamalar	Cloud native uygulamalar, bulut ortamına özel olarak tasarlanmış yazılımlardır.\n\nTemel Prensipler:\n1. 12-Factor App\n   - Konfigürasyon yönetimi\n   - Bağımlılık yönetimi\n   - Log yönetimi\n\n2. Konteyner Best Practices\n   - İmaj optimizasyonu\n   - Güvenlik taraması\n   - Kaynak limitleri\n\n3. Cloud Native Araçlar\n   - Service mesh\n   - API gateway\n   - Service discovery	91	708	4	\N	\N
246	Serverless Computing	Serverless, sunucu yönetimi olmadan kod çalıştırma modelidir.\n\nÖzellikler:\n1. FaaS\n   - Event-driven çalışma\n   - Otomatik ölçeklendirme\n   - Kullanım bazlı ödeme\n\n2. BaaS\n   - Kimlik doğrulama\n   - Veritabanı hizmetleri\n   - Depolama çözümleri\n\n3. Kullanım Alanları\n   - API endpoint'leri\n   - Event işleme\n   - Zamanlanmış görevler	91	708	4	\N	\N
247	Cloud Security	Bulut güvenliği, veri ve kaynakların korunması için çok katmanlı bir yaklaşım gerektirir.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Güvenlik grupları\n   - Network ACL'ler\n\n2. Data Security\n   - Veri şifreleme\n   - Anahtar yönetimi\n   - Veri sınıflandırma\n\n3. Identity Security\n   - Çok faktörlü kimlik doğrulama\n   - Rol tabanlı erişim\n   - Denetim kayıtları	91	709	4	\N	\N
248	Compliance ve Governance	Bulut uyumluluk ve yönetişim, standartlara uygunluğu sağlar.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama gereksinimleri\n\n3. HIPAA\n   - Sağlık verisi güvenliği\n   - Gizlilik kuralları\n   - Güvenlik önlemleri	91	709	4	\N	\N
249	Cloud Cost Optimization	Bulut maliyet optimizasyonu stratejileri.\n\nOptimizasyon Alanları:\n1. Resource Management\n   - Right-sizing\n   - Reserved instances\n   - Spot instances\n\n2. Storage Optimization\n   - Lifecycle policies\n   - Data tiering\n   - Compression\n\n3. Monitoring ve Analytics\n   - Cost allocation\n   - Usage patterns\n   - Budget alerts	91	710	4	\N	\N
250	Disaster Recovery	Felaket kurtarma planlaması ve uygulaması.\n\nDR Stratejileri:\n1. Backup Stratejileri\n   - Cross-region backup\n   - Point-in-time recovery\n   - Backup testing\n\n2. Recovery Planları\n   - RTO ve RPO\n   - Failover testing\n   - Documentation\n\n3. High Availability\n   - Multi-AZ deployment\n   - Load balancing\n   - Auto-scaling	91	710	4	\N	\N
251	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	96	771	5	\N	\N
252	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	96	771	5	\N	\N
253	Docker Temelleri	Docker, uygulamaların konteynerler içinde izole bir şekilde çalışmasını sağlayan bir platformdur.\n\nTemel Bileşenler:\n1. Docker Engine\n   - Konteyner yaşam döngüsü yönetimi\n   - İmaj işlemleri\n   - Ağ ve depolama yönetimi\n\n2. Docker Images\n   - Uygulama ve bağımlılıkları paketler\n   - Katmanlı depolama\n   - Yeniden kullanılabilir yapı\n\n3. Docker Containers\n   - İzole çalışma ortamı\n   - Kaynak kısıtlamaları\n   - Ağ yapılandırması	96	772	5	\N	\N
254	Docker Komutları	Docker ile çalışırken kullanılan temel komutlar:\n\nİmaj Yönetimi:\n1. docker pull: Uzak kayıttan imaj indirme\n2. docker build: Dockerfile'dan imaj oluşturma\n3. docker images: Yerel imajları listeleme\n\nKonteyner Yönetimi:\n1. docker run: Konteyner başlatma\n2. docker ps: Aktif konteynerleri listeleme\n3. docker stop: Konteyner durdurma\n\nSistem Yönetimi:\n1. docker system prune: Gereksiz kaynakları temizleme\n2. docker network: Ağ yapılandırması\n3. docker volume: Veri depolama yönetimi	96	772	5	\N	\N
255	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını tanımlayan metin dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build argümanları\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	96	773	5	\N	\N
256	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetir.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	96	773	5	\N	\N
257	AWS Temel Servisleri	Amazon Web Services, bulut tabanlı hizmetler sunan kapsamlı bir platformdur.\n\nAna Servisler:\n1. EC2\n   - Sanal sunucu hizmetleri\n   - Farklı instance tipleri\n   - Otomatik ölçeklendirme\n\n2. S3\n   - Nesne depolama\n   - Yüksek dayanıklılık\n   - Erişim kontrolü\n\n3. RDS\n   - Yönetilen veritabanı\n   - Otomatik yedekleme\n   - Yüksek erişilebilirlik	96	774	5	\N	\N
258	AWS Güvenlik	AWS güvenlik hizmetleri, bulut kaynaklarını korumak için çeşitli araçlar sunar.\n\nGüvenlik Araçları:\n1. IAM\n   - Kullanıcı ve rol yönetimi\n   - Erişim politikaları\n   - Çok faktörlü kimlik doğrulama\n\n2. VPC\n   - Sanal özel ağ\n   - Güvenlik grupları\n   - Ağ izolasyonu\n\n3. KMS\n   - Anahtar yönetimi\n   - Şifreleme\n   - Sertifika yönetimi	96	774	5	\N	\N
259	Kubernetes Temelleri	Kubernetes, konteyner tabanlı uygulamaların otomatik yönetimi için geliştirilmiş bir platformdur.\n\nTemel Kavramlar:\n1. Pod\n   - Bir veya daha fazla konteyner içerir\n   - Ortak kaynakları paylaşır\n   - En küçük dağıtım birimidir\n\n2. Service\n   - Yük dengeleme sağlar\n   - Servis keşfi sunar\n   - DNS ile entegre çalışır\n\n3. Deployment\n   - Uygulama güncellemelerini yönetir\n   - Otomatik ölçeklendirme\n   - Rollback desteği	96	775	5	\N	\N
260	Kubernetes Yönetimi	Kubernetes'te kaynak ve yapılandırma yönetimi önemlidir.\n\nYönetim Araçları:\n1. Namespace\n   - Kaynakları izole eder\n   - Farklı ekipler için ayrım sağlar\n   - Kotalar belirlenebilir\n\n2. ConfigMap ve Secret\n   - Uygulama ayarlarını saklar\n   - Hassas bilgileri şifreler\n   - Ortam değişkenleri sağlar\n\n3. Resource Quota\n   - CPU ve bellek sınırları\n   - Depolama kısıtlamaları\n   - Kaynak kullanımını kontrol eder	96	775	5	\N	\N
261	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım, yazılım geliştirme sürecini otomatize eder.\n\nPipeline Aşamaları:\n1. Kaynak Kod Yönetimi\n   - Versiyon kontrolü\n   - Branch stratejileri\n   - Code review süreci\n\n2. Build ve Test\n   - Otomatik derleme\n   - Birim testleri\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback stratejisi	96	776	5	\N	\N
262	Jenkins ve GitLab CI	CI/CD araçları, yazılım geliştirme sürecini otomatize eder.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin desteği\n   - Dağıtık build sistemi\n\n2. GitLab CI\n   - YAML tabanlı konfigürasyon\n   - Runner yönetimi\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	96	776	5	\N	\N
263	Mikroservis Mimarisi	Mikroservis mimarisi, uygulamaları küçük, bağımsız servislere bölen bir yaklaşımdır.\n\nMimari Özellikler:\n1. Servis Tasarımı\n   - Her servis tek bir sorumluluk taşır\n   - Servisler bağımsız dağıtılabilir\n   - API'ler ile iletişim kurar\n\n2. İletişim Mekanizmaları\n   - REST API'ler\n   - Message broker'lar\n   - Event-driven iletişim\n\n3. Veri Yönetimi\n   - Her servis kendi veritabanına sahip\n   - Event sourcing\n   - CQRS pattern	96	777	5	\N	\N
264	Servis Mesh	Servis mesh, mikroservisler arasındaki iletişimi yöneten bir altyapı katmanıdır.\n\nTemel Özellikler:\n1. Trafik Yönetimi\n   - Yük dengeleme\n   - Circuit breaking\n   - Retry mekanizmaları\n\n2. Güvenlik\n   - mTLS şifreleme\n   - Yetkilendirme\n   - Rate limiting\n\n3. İzlenebilirlik\n   - Dağıtık izleme\n   - Metrik toplama\n   - Log yönetimi	96	777	5	\N	\N
265	Cloud Native Uygulamalar	Cloud native uygulamalar, bulut ortamına özel olarak tasarlanmış yazılımlardır.\n\nTemel Prensipler:\n1. 12-Factor App\n   - Konfigürasyon yönetimi\n   - Bağımlılık yönetimi\n   - Log yönetimi\n\n2. Konteyner Best Practices\n   - İmaj optimizasyonu\n   - Güvenlik taraması\n   - Kaynak limitleri\n\n3. Cloud Native Araçlar\n   - Service mesh\n   - API gateway\n   - Service discovery	96	778	5	\N	\N
266	Serverless Computing	Serverless, sunucu yönetimi olmadan kod çalıştırma modelidir.\n\nÖzellikler:\n1. FaaS\n   - Event-driven çalışma\n   - Otomatik ölçeklendirme\n   - Kullanım bazlı ödeme\n\n2. BaaS\n   - Kimlik doğrulama\n   - Veritabanı hizmetleri\n   - Depolama çözümleri\n\n3. Kullanım Alanları\n   - API endpoint'leri\n   - Event işleme\n   - Zamanlanmış görevler	96	778	5	\N	\N
267	Cloud Security	Bulut güvenliği, veri ve kaynakların korunması için çok katmanlı bir yaklaşım gerektirir.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Güvenlik grupları\n   - Network ACL'ler\n\n2. Data Security\n   - Veri şifreleme\n   - Anahtar yönetimi\n   - Veri sınıflandırma\n\n3. Identity Security\n   - Çok faktörlü kimlik doğrulama\n   - Rol tabanlı erişim\n   - Denetim kayıtları	96	779	5	\N	\N
268	Compliance ve Governance	Bulut uyumluluk ve yönetişim, standartlara uygunluğu sağlar.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama gereksinimleri\n\n3. HIPAA\n   - Sağlık verisi güvenliği\n   - Gizlilik kuralları\n   - Güvenlik önlemleri	96	779	5	\N	\N
269	Cloud Cost Optimization	Bulut maliyet optimizasyonu, kaynakların verimli kullanımını sağlar.\n\nOptimizasyon Stratejileri:\n1. Resource Management\n   - Doğru boyutlandırma\n   - Rezerve edilmiş instance'lar\n   - Spot instance'lar\n\n2. Storage Optimization\n   - Yaşam döngüsü politikaları\n   - Veri katmanlama\n   - Sıkıştırma\n\n3. Monitoring ve Analytics\n   - Maliyet dağılımı\n   - Kullanım analizi\n   - Bütçe uyarıları	96	780	5	\N	\N
270	Disaster Recovery	Felaket kurtarma, sistemlerin kesintisiz çalışmasını sağlar.\n\nDR Stratejileri:\n1. Backup Stratejileri\n   - Bölgeler arası yedekleme\n   - Zaman noktası kurtarma\n   - Yedekleme testleri\n\n2. Recovery Planları\n   - RTO ve RPO hedefleri\n   - Failover testleri\n   - Dokümantasyon\n\n3. High Availability\n   - Çoklu bölge dağıtımı\n   - Yük dengeleme\n   - Otomatik ölçeklendirme	96	780	5	\N	\N
271	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	101	841	6	\N	\N
272	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	101	841	6	\N	\N
273	Docker Temelleri	Docker, uygulamaların konteynerler içinde çalışmasını sağlayan bir platformdur.\n\nAna Bileşenler:\n1. Docker Engine\n   - Konteyner yaşam döngüsü\n   - İmaj yönetimi\n   - Ağ ve depolama\n\n2. Docker Images\n   - Uygulama paketleme\n   - Katmanlı yapı\n   - Yeniden kullanım\n\n3. Docker Containers\n   - İzole ortamlar\n   - Kaynak kontrolü\n   - Ağ yapılandırması	101	842	6	\N	\N
274	Docker Komutları	Docker ile çalışırken kullanılan temel komutlar:\n\nİmaj İşlemleri:\n1. docker pull: İmaj indirme\n2. docker build: İmaj oluşturma\n3. docker images: İmaj listeleme\n\nKonteyner İşlemleri:\n1. docker run: Konteyner başlatma\n2. docker ps: Konteyner listeleme\n3. docker stop: Konteyner durdurma\n\nSistem İşlemleri:\n1. docker system prune: Temizlik\n2. docker network: Ağ yönetimi\n3. docker volume: Veri yönetimi	101	842	6	\N	\N
275	AWS Temel Servisleri	Amazon Web Services, bulut tabanlı çözümler sunan bir platformdur.\n\nTemel Servisler:\n1. EC2\n   - Sanal sunucular\n   - Instance tipleri\n   - Ölçeklendirme\n\n2. S3\n   - Nesne depolama\n   - Dayanıklılık\n   - Erişim kontrolü\n\n3. RDS\n   - Veritabanı hizmeti\n   - Yedekleme\n   - Erişilebilirlik	101	844	6	\N	\N
276	AWS Güvenlik	AWS güvenlik hizmetleri, bulut kaynaklarını korur.\n\nGüvenlik Katmanları:\n1. IAM\n   - Kullanıcı yönetimi\n   - Rol tabanlı erişim\n   - Politika tanımları\n\n2. VPC\n   - Özel ağ\n   - Güvenlik grupları\n   - Ağ izolasyonu\n\n3. KMS\n   - Anahtar yönetimi\n   - Şifreleme\n   - Sertifika yönetimi	101	844	6	\N	\N
277	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını tanımlayan metin dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build argümanları\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	101	845	6	\N	\N
278	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetir.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	101	845	6	\N	\N
279	Kubernetes Temelleri	Kubernetes, konteyner tabanlı uygulamaların otomatik yönetimi için geliştirilmiş bir platformdur.\n\nTemel Kavramlar:\n1. Pod\n   - Bir veya daha fazla konteyner içerir\n   - Ortak kaynakları paylaşır\n   - En küçük dağıtım birimidir\n\n2. Service\n   - Yük dengeleme sağlar\n   - Servis keşfi sunar\n   - DNS ile entegre çalışır\n\n3. Deployment\n   - Uygulama güncellemelerini yönetir\n   - Otomatik ölçeklendirme\n   - Rollback desteği	101	846	6	\N	\N
280	Kubernetes Yönetimi	Kubernetes'te kaynak ve yapılandırma yönetimi önemlidir.\n\nYönetim Araçları:\n1. Namespace\n   - Kaynakları izole eder\n   - Farklı ekipler için ayrım sağlar\n   - Kotalar belirlenebilir\n\n2. ConfigMap ve Secret\n   - Uygulama ayarlarını saklar\n   - Hassas bilgileri şifreler\n   - Ortam değişkenleri sağlar\n\n3. Resource Quota\n   - CPU ve bellek sınırları\n   - Depolama kısıtlamaları\n   - Kaynak kullanımını kontrol eder	101	846	6	\N	\N
281	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım, yazılım geliştirme sürecini otomatize eder.\n\nPipeline Aşamaları:\n1. Kaynak Kod Yönetimi\n   - Versiyon kontrolü\n   - Branch stratejileri\n   - Code review süreci\n\n2. Build ve Test\n   - Otomatik derleme\n   - Birim testleri\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback stratejisi	101	847	6	\N	\N
282	Jenkins ve GitLab CI	CI/CD araçları, yazılım geliştirme sürecini otomatize eder.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin desteği\n   - Dağıtık build sistemi\n\n2. GitLab CI\n   - YAML tabanlı konfigürasyon\n   - Runner yönetimi\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	101	847	6	\N	\N
283	Mikroservis Mimarisi	Mikroservis mimarisi, uygulamaları küçük, bağımsız servislere bölen bir yaklaşımdır.\n\nMimari Özellikler:\n1. Servis Tasarımı\n   - Her servis tek bir sorumluluk taşır\n   - Servisler bağımsız dağıtılabilir\n   - API'ler ile iletişim kurar\n\n2. İletişim Mekanizmaları\n   - REST API'ler\n   - Message broker'lar\n   - Event-driven iletişim\n\n3. Veri Yönetimi\n   - Her servis kendi veritabanına sahip\n   - Event sourcing\n   - CQRS pattern	101	848	6	\N	\N
284	Servis Mesh	Servis mesh, mikroservisler arasındaki iletişimi yöneten bir altyapı katmanıdır.\n\nTemel Özellikler:\n1. Trafik Yönetimi\n   - Yük dengeleme\n   - Circuit breaking\n   - Retry mekanizmaları\n\n2. Güvenlik\n   - mTLS şifreleme\n   - Yetkilendirme\n   - Rate limiting\n\n3. İzlenebilirlik\n   - Dağıtık izleme\n   - Metrik toplama\n   - Log yönetimi	101	848	6	\N	\N
285	Cloud Native Uygulamalar	Cloud native uygulamalar, bulut ortamına özel olarak tasarlanmış yazılımlardır.\n\nTemel Prensipler:\n1. 12-Factor App\n   - Konfigürasyon yönetimi\n   - Bağımlılık yönetimi\n   - Log yönetimi\n\n2. Konteyner Best Practices\n   - İmaj optimizasyonu\n   - Güvenlik taraması\n   - Kaynak limitleri\n\n3. Cloud Native Araçlar\n   - Service mesh\n   - API gateway\n   - Service discovery	101	849	6	\N	\N
286	Serverless Computing	Serverless, sunucu yönetimi olmadan kod çalıştırma modelidir.\n\nÖzellikler:\n1. FaaS\n   - Event-driven çalışma\n   - Otomatik ölçeklendirme\n   - Kullanım bazlı ödeme\n\n2. BaaS\n   - Kimlik doğrulama\n   - Veritabanı hizmetleri\n   - Depolama çözümleri\n\n3. Kullanım Alanları\n   - API endpoint'leri\n   - Event işleme\n   - Zamanlanmış görevler	101	849	6	\N	\N
287	Cloud Security	Bulut güvenliği, veri ve kaynakların korunması için çok katmanlı bir yaklaşım gerektirir.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Güvenlik grupları\n   - Network ACL'ler\n\n2. Data Security\n   - Veri şifreleme\n   - Anahtar yönetimi\n   - Veri sınıflandırma\n\n3. Identity Security\n   - Çok faktörlü kimlik doğrulama\n   - Rol tabanlı erişim\n   - Denetim kayıtları	101	850	6	\N	\N
288	Compliance ve Governance	Bulut uyumluluk ve yönetişim, standartlara uygunluğu sağlar.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama gereksinimleri\n\n3. HIPAA\n   - Sağlık verisi güvenliği\n   - Gizlilik kuralları\n   - Güvenlik önlemleri	101	850	6	\N	\N
289	Cloud Cost Optimization	Bulut maliyet optimizasyonu, kaynakların verimli kullanımını sağlar.\n\nOptimizasyon Stratejileri:\n1. Resource Management\n   - Doğru boyutlandırma\n   - Rezerve edilmiş instance'lar\n   - Spot instance'lar\n\n2. Storage Optimization\n   - Yaşam döngüsü politikaları\n   - Veri katmanlama\n   - Sıkıştırma\n\n3. Monitoring ve Analytics\n   - Maliyet dağılımı\n   - Kullanım analizi\n   - Bütçe uyarıları	101	851	6	\N	\N
290	Disaster Recovery	Felaket kurtarma, sistemlerin kesintisiz çalışmasını sağlar.\n\nDR Stratejileri:\n1. Backup Stratejileri\n   - Bölgeler arası yedekleme\n   - Zaman noktası kurtarma\n   - Yedekleme testleri\n\n2. Recovery Planları\n   - RTO ve RPO hedefleri\n   - Failover testleri\n   - Dokümantasyon\n\n3. High Availability\n   - Çoklu bölge dağıtımı\n   - Yük dengeleme\n   - Otomatik ölçeklendirme	101	851	6	\N	\N
291	Dockerfile ve İmaj Oluşturma	Dockerfile, Docker imajlarını oluşturmak için kullanılan yapılandırma dosyalarıdır.\n\nDockerfile Yapısı:\n1. Temel Komutlar\n   - FROM: Temel imaj seçimi\n   - WORKDIR: Çalışma dizini\n   - COPY/ADD: Dosya kopyalama\n\n2. Uygulama Kurulumu\n   - RUN: Komut çalıştırma\n   - ENV: Ortam değişkenleri\n   - ARG: Build parametreleri\n\n3. Konteyner Yapılandırması\n   - EXPOSE: Port tanımlama\n   - CMD: Varsayılan komut\n   - ENTRYPOINT: Giriş noktası	106	913	7	\N	\N
292	Docker Compose	Docker Compose, çoklu konteyner uygulamalarını yönetmek için kullanılır.\n\nCompose Özellikleri:\n1. Servis Tanımları\n   - Konteyner yapılandırması\n   - Bağımlılık yönetimi\n   - Ağ tanımlamaları\n\n2. Ortam Yönetimi\n   - .env dosyaları\n   - Değişken kullanımı\n   - Profil yönetimi\n\n3. Komutlar\n   - docker-compose up: Başlatma\n   - docker-compose down: Durdurma\n   - docker-compose logs: Log görüntüleme	106	913	7	\N	\N
293	AWS Temel Servisleri	Amazon Web Services, bulut tabanlı hizmetler sunan bir platformdur.\n\nTemel Servisler:\n1. EC2\n   - Sanal sunucular\n   - Instance tipleri\n   - Ölçeklendirme\n\n2. S3\n   - Nesne depolama\n   - Dayanıklılık\n   - Erişim kontrolü\n\n3. RDS\n   - Veritabanı hizmeti\n   - Yedekleme\n   - Erişilebilirlik	106	914	7	\N	\N
294	AWS Güvenlik	AWS güvenlik hizmetleri, bulut kaynaklarını korur.\n\nGüvenlik Katmanları:\n1. IAM\n   - Kullanıcı yönetimi\n   - Rol tabanlı erişim\n   - Politika tanımları\n\n2. VPC\n   - Özel ağ\n   - Güvenlik grupları\n   - Ağ izolasyonu\n\n3. KMS\n   - Anahtar yönetimi\n   - Şifreleme\n   - Sertifika yönetimi	106	914	7	\N	\N
295	CI/CD Pipeline	Sürekli Entegrasyon ve Dağıtım, yazılım geliştirme sürecini otomatize eder.\n\nPipeline Aşamaları:\n1. Kaynak Kod Yönetimi\n   - Versiyon kontrolü\n   - Branch stratejileri\n   - Code review süreci\n\n2. Build ve Test\n   - Otomatik derleme\n   - Birim testleri\n   - Entegrasyon testleri\n\n3. Deployment\n   - Staging ortamı\n   - Production deployment\n   - Rollback stratejisi	106	916	7	\N	\N
296	Jenkins ve GitLab CI	CI/CD araçları, yazılım geliştirme sürecini otomatize eder.\n\nAraç Özellikleri:\n1. Jenkins\n   - Pipeline tanımları\n   - Plugin desteği\n   - Dağıtık build sistemi\n\n2. GitLab CI\n   - YAML tabanlı konfigürasyon\n   - Runner yönetimi\n   - Pipeline görselleştirme\n\n3. Entegrasyon\n   - Docker desteği\n   - Kubernetes entegrasyonu\n   - Artifact yönetimi	106	916	7	\N	\N
297	Cloud Computing Temelleri	Bulut bilişim, internet üzerinden sunulan bilgi işlem kaynakları ve hizmetleridir.\n\nTemel Özellikler:\n1. Ölçeklenebilirlik\n   - Dinamik kaynak ayırma\n   - Otomatik ölçeklendirme\n   - Yük dengeleme\n\n2. Esneklik\n   - İhtiyaca göre kaynak kullanımı\n   - Ödeme modeli\n   - Hizmet çeşitliliği\n\n3. Güvenilirlik\n   - Yüksek erişilebilirlik\n   - Veri yedekleme\n   - Felaket kurtarma	111	981	8	\N	\N
298	Bulut Hizmet Modelleri	Bulut bilişim üç temel hizmet modeli sunar.\n\nHizmet Modelleri:\n1. IaaS (Infrastructure as a Service)\n   - Sanal makineler\n   - Depolama\n   - Ağ altyapısı\n\n2. PaaS (Platform as a Service)\n   - Geliştirme ortamı\n   - Veritabanı yönetimi\n   - Uygulama barındırma\n\n3. SaaS (Software as a Service)\n   - Hazır uygulamalar\n   - Web tabanlı erişim\n   - Otomatik güncellemeler	111	981	8	\N	\N
299	Docker Temelleri	Docker, uygulamaların konteynerler içinde çalışmasını sağlayan bir platformdur.\n\nAna Bileşenler:\n1. Docker Engine\n   - Konteyner yaşam döngüsü\n   - İmaj yönetimi\n   - Ağ ve depolama\n\n2. Docker Images\n   - Uygulama paketleme\n   - Katmanlı yapı\n   - Yeniden kullanım\n\n3. Docker Containers\n   - İzole ortamlar\n   - Kaynak kontrolü\n   - Ağ yapılandırması	111	982	8	\N	\N
300	Docker Komutları	Docker ile çalışırken kullanılan temel komutlar:\n\nİmaj İşlemleri:\n1. docker pull: İmaj indirme\n2. docker build: İmaj oluşturma\n3. docker images: İmaj listeleme\n\nKonteyner İşlemleri:\n1. docker run: Konteyner başlatma\n2. docker ps: Konteyner listeleme\n3. docker stop: Konteyner durdurma\n\nSistem İşlemleri:\n1. docker system prune: Temizlik\n2. docker network: Ağ yönetimi\n3. docker volume: Veri yönetimi	111	982	8	\N	\N
301	Cloud Security	Bulut güvenliği, veri ve kaynakların korunması için çok katmanlı bir yaklaşım gerektirir.\n\nGüvenlik Katmanları:\n1. Network Security\n   - VPC yapılandırması\n   - Güvenlik grupları\n   - Network ACL'ler\n\n2. Data Security\n   - Veri şifreleme\n   - Anahtar yönetimi\n   - Veri sınıflandırma\n\n3. Identity Security\n   - Çok faktörlü kimlik doğrulama\n   - Rol tabanlı erişim\n   - Denetim kayıtları	111	989	8	\N	\N
302	Compliance ve Governance	Bulut uyumluluk ve yönetişim, standartlara uygunluğu sağlar.\n\nStandartlar:\n1. ISO 27001\n   - Risk yönetimi\n   - Güvenlik kontrolleri\n   - Süreç yönetimi\n\n2. GDPR\n   - Veri koruma\n   - Kullanıcı hakları\n   - Raporlama gereksinimleri\n\n3. HIPAA\n   - Sağlık verisi güvenliği\n   - Gizlilik kuralları\n   - Güvenlik önlemleri	111	989	8	\N	\N
\.


--
-- Data for Name: lmsApp_room; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_room" (id, name, description, updated, created, host_id, topic_id) FROM stdin;
\.


--
-- Data for Name: lmsApp_room_participants; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_room_participants" (id, room_id, user_id) FROM stdin;
\.


--
-- Data for Name: lmsApp_topic; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_topic" (id, name) FROM stdin;
\.


--
-- Data for Name: lmsApp_week; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_week" (id, week_number, lesson_id, user_id) FROM stdin;
1121	1	81	1
1122	2	81	1
1123	3	81	1
1124	4	81	1
1125	5	81	1
1126	6	81	1
1127	7	81	1
1128	8	81	1
1129	9	81	1
1130	10	81	1
1151	1	116	1
1152	2	116	1
1153	3	116	1
1154	4	116	1
1155	5	116	1
1156	6	116	1
1157	7	116	1
1158	8	116	1
1159	9	116	1
1160	10	116	1
1161	11	116	1
1162	12	116	1
1163	13	116	1
1164	14	116	1
561	1	81	2
562	2	81	2
563	3	81	2
564	4	81	2
565	5	81	2
566	6	81	2
567	7	81	2
568	8	81	2
569	9	81	2
570	10	81	2
571	11	81	2
572	12	81	2
573	13	81	2
574	14	81	2
575	1	82	2
576	2	82	2
577	3	82	2
578	4	82	2
579	5	82	2
580	6	82	2
581	7	82	2
582	8	82	2
583	9	82	2
584	10	82	2
585	11	82	2
586	12	82	2
587	13	82	2
588	14	82	2
589	1	83	2
590	2	83	2
591	3	83	2
592	4	83	2
593	5	83	2
594	6	83	2
595	7	83	2
596	8	83	2
597	9	83	2
598	10	83	2
599	11	83	2
600	12	83	2
601	13	83	2
602	14	83	2
603	1	84	2
604	2	84	2
605	3	84	2
606	4	84	2
607	5	84	2
608	6	84	2
609	7	84	2
610	8	84	2
611	9	84	2
612	10	84	2
613	11	84	2
614	12	84	2
615	13	84	2
616	14	84	2
617	1	85	2
618	2	85	2
619	3	85	2
620	4	85	2
621	5	85	2
622	6	85	2
623	7	85	2
624	8	85	2
625	9	85	2
626	10	85	2
627	11	85	2
628	12	85	2
629	13	85	2
630	14	85	2
631	1	86	3
632	2	86	3
633	3	86	3
634	4	86	3
635	5	86	3
636	6	86	3
637	7	86	3
638	8	86	3
639	9	86	3
640	10	86	3
641	11	86	3
642	12	86	3
643	13	86	3
644	14	86	3
645	1	87	3
646	2	87	3
647	3	87	3
648	4	87	3
649	5	87	3
650	6	87	3
651	7	87	3
652	8	87	3
653	9	87	3
654	10	87	3
655	11	87	3
656	12	87	3
657	13	87	3
658	14	87	3
659	1	88	3
660	2	88	3
661	3	88	3
662	4	88	3
663	5	88	3
664	6	88	3
665	7	88	3
666	8	88	3
667	9	88	3
668	10	88	3
669	11	88	3
670	12	88	3
671	13	88	3
672	14	88	3
673	1	89	3
674	2	89	3
675	3	89	3
676	4	89	3
677	5	89	3
678	6	89	3
679	7	89	3
680	8	89	3
681	9	89	3
682	10	89	3
683	11	89	3
684	12	89	3
685	13	89	3
686	14	89	3
687	1	90	3
688	2	90	3
689	3	90	3
690	4	90	3
691	5	90	3
692	6	90	3
693	7	90	3
694	8	90	3
695	9	90	3
696	10	90	3
697	11	90	3
698	12	90	3
699	13	90	3
700	14	90	3
701	1	91	4
702	2	91	4
703	3	91	4
704	4	91	4
705	5	91	4
706	6	91	4
707	7	91	4
708	8	91	4
709	9	91	4
710	10	91	4
711	11	91	4
712	12	91	4
713	13	91	4
714	14	91	4
715	1	92	4
716	2	92	4
717	3	92	4
718	4	92	4
719	5	92	4
720	6	92	4
721	7	92	4
722	8	92	4
723	9	92	4
724	10	92	4
725	11	92	4
726	12	92	4
727	13	92	4
728	14	92	4
729	1	93	4
730	2	93	4
731	3	93	4
732	4	93	4
733	5	93	4
734	6	93	4
735	7	93	4
736	8	93	4
737	9	93	4
738	10	93	4
739	11	93	4
740	12	93	4
741	13	93	4
742	14	93	4
743	1	94	4
744	2	94	4
745	3	94	4
746	4	94	4
747	5	94	4
748	6	94	4
749	7	94	4
750	8	94	4
751	9	94	4
752	10	94	4
753	11	94	4
754	12	94	4
755	13	94	4
756	14	94	4
757	1	95	4
758	2	95	4
759	3	95	4
760	4	95	4
761	5	95	4
762	6	95	4
763	7	95	4
764	8	95	4
765	9	95	4
766	10	95	4
767	11	95	4
768	12	95	4
769	13	95	4
770	14	95	4
771	1	96	5
772	2	96	5
773	3	96	5
774	4	96	5
775	5	96	5
776	6	96	5
777	7	96	5
778	8	96	5
779	9	96	5
780	10	96	5
781	11	96	5
782	12	96	5
783	13	96	5
784	14	96	5
785	1	97	5
786	2	97	5
787	3	97	5
788	4	97	5
789	5	97	5
790	6	97	5
791	7	97	5
792	8	97	5
793	9	97	5
794	10	97	5
795	11	97	5
796	12	97	5
797	13	97	5
798	14	97	5
799	1	98	5
800	2	98	5
801	3	98	5
802	4	98	5
803	5	98	5
804	6	98	5
805	7	98	5
806	8	98	5
807	9	98	5
808	10	98	5
809	11	98	5
810	12	98	5
811	13	98	5
812	14	98	5
813	1	99	5
814	2	99	5
815	3	99	5
816	4	99	5
817	5	99	5
818	6	99	5
819	7	99	5
820	8	99	5
821	9	99	5
822	10	99	5
823	11	99	5
824	12	99	5
825	13	99	5
826	14	99	5
827	1	100	5
828	2	100	5
829	3	100	5
830	4	100	5
831	5	100	5
832	6	100	5
833	7	100	5
834	8	100	5
835	9	100	5
836	10	100	5
837	11	100	5
838	12	100	5
839	13	100	5
840	14	100	5
841	1	101	6
842	2	101	6
843	3	101	6
844	4	101	6
845	5	101	6
846	6	101	6
847	7	101	6
848	8	101	6
849	9	101	6
850	10	101	6
851	11	101	6
852	12	101	6
853	13	101	6
854	14	101	6
855	1	102	6
856	2	102	6
857	3	102	6
858	4	102	6
859	5	102	6
860	6	102	6
861	7	102	6
862	8	102	6
863	9	102	6
864	10	102	6
865	11	102	6
866	12	102	6
867	13	102	6
868	14	102	6
869	1	103	6
870	2	103	6
871	3	103	6
872	4	103	6
873	5	103	6
874	6	103	6
875	7	103	6
876	8	103	6
877	9	103	6
878	10	103	6
879	11	103	6
880	12	103	6
881	13	103	6
882	14	103	6
883	1	104	6
884	2	104	6
885	3	104	6
886	4	104	6
887	5	104	6
888	6	104	6
889	7	104	6
890	8	104	6
891	9	104	6
892	10	104	6
893	11	104	6
894	12	104	6
895	13	104	6
896	14	104	6
897	1	105	6
898	2	105	6
899	3	105	6
900	4	105	6
901	5	105	6
902	6	105	6
903	7	105	6
904	8	105	6
905	9	105	6
906	10	105	6
907	11	105	6
908	12	105	6
909	13	105	6
910	14	105	6
911	1	106	7
912	2	106	7
913	3	106	7
914	4	106	7
915	5	106	7
916	6	106	7
917	7	106	7
918	8	106	7
919	9	106	7
920	10	106	7
921	11	106	7
922	12	106	7
923	13	106	7
924	14	106	7
925	1	107	7
926	2	107	7
927	3	107	7
928	4	107	7
929	5	107	7
930	6	107	7
931	7	107	7
932	8	107	7
933	9	107	7
934	10	107	7
935	11	107	7
936	12	107	7
937	13	107	7
938	14	107	7
939	1	108	7
940	2	108	7
941	3	108	7
942	4	108	7
943	5	108	7
944	6	108	7
945	7	108	7
946	8	108	7
947	9	108	7
948	10	108	7
949	11	108	7
950	12	108	7
951	13	108	7
952	14	108	7
953	1	109	7
954	2	109	7
955	3	109	7
956	4	109	7
957	5	109	7
958	6	109	7
959	7	109	7
960	8	109	7
961	9	109	7
962	10	109	7
963	11	109	7
964	12	109	7
965	13	109	7
966	14	109	7
967	1	110	7
968	2	110	7
969	3	110	7
970	4	110	7
971	5	110	7
972	6	110	7
973	7	110	7
974	8	110	7
975	9	110	7
976	10	110	7
977	11	110	7
978	12	110	7
979	13	110	7
980	14	110	7
981	1	111	8
982	2	111	8
983	3	111	8
984	4	111	8
985	5	111	8
986	6	111	8
987	7	111	8
988	8	111	8
989	9	111	8
990	10	111	8
991	11	111	8
992	12	111	8
993	13	111	8
994	14	111	8
995	1	112	8
996	2	112	8
997	3	112	8
998	4	112	8
999	5	112	8
1000	6	112	8
1001	7	112	8
1002	8	112	8
1003	9	112	8
1004	10	112	8
1005	11	112	8
1006	12	112	8
1007	13	112	8
1008	14	112	8
1009	1	113	8
1010	2	113	8
1011	3	113	8
1012	4	113	8
1013	5	113	8
1014	6	113	8
1015	7	113	8
1016	8	113	8
1017	9	113	8
1018	10	113	8
1019	11	113	8
1020	12	113	8
1021	13	113	8
1022	14	113	8
1023	1	114	8
1024	2	114	8
1025	3	114	8
1026	4	114	8
1027	5	114	8
1028	6	114	8
1029	7	114	8
1030	8	114	8
1031	9	114	8
1032	10	114	8
1033	11	114	8
1034	12	114	8
1035	13	114	8
1036	14	114	8
1037	1	115	8
1038	2	115	8
1039	3	115	8
1040	4	115	8
1041	5	115	8
1042	6	115	8
1043	7	115	8
1044	8	115	8
1045	9	115	8
1046	10	115	8
1047	11	115	8
1048	12	115	8
1049	13	115	8
1050	14	115	8
1065	1	117	1
1066	2	117	1
1067	3	117	1
1068	4	117	1
1069	5	117	1
1070	6	117	1
1071	7	117	1
1072	8	117	1
1073	9	117	1
1074	10	117	1
1075	11	117	1
1076	12	117	1
1077	13	117	1
1078	14	117	1
1079	1	118	1
1080	2	118	1
1081	3	118	1
1082	4	118	1
1083	5	118	1
1084	6	118	1
1085	7	118	1
1086	8	118	1
1087	9	118	1
1088	10	118	1
1089	11	118	1
1090	12	118	1
1091	13	118	1
1092	14	118	1
1093	1	119	1
1094	2	119	1
1095	3	119	1
1096	4	119	1
1097	5	119	1
1098	6	119	1
1099	7	119	1
1100	8	119	1
1101	9	119	1
1102	10	119	1
1103	11	119	1
1104	12	119	1
1105	13	119	1
1106	14	119	1
1107	1	120	1
1108	2	120	1
1109	3	120	1
1110	4	120	1
1111	5	120	1
1112	6	120	1
1113	7	120	1
1114	8	120	1
1115	9	120	1
1116	10	120	1
1117	11	120	1
1118	12	120	1
1119	13	120	1
1120	14	120	1
\.


--
-- Data for Name: lmsApp_weekpdf; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."lmsApp_weekpdf" (id, title, pdf, week_id, user_id) FROM stdin;
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 72, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 8, true);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- Name: django_celery_results_chordcounter_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_celery_results_chordcounter_id_seq', 1, false);


--
-- Name: django_celery_results_groupresult_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_celery_results_groupresult_id_seq', 1, false);


--
-- Name: django_celery_results_taskresult_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_celery_results_taskresult_id_seq', 1, false);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 18, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 46, true);


--
-- Name: lmsApp_chatmessage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_chatmessage_id_seq"', 1, false);


--
-- Name: lmsApp_event_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_event_id_seq"', 1, false);


--
-- Name: lmsApp_lesson_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_lesson_id_seq"', 120, true);


--
-- Name: lmsApp_message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_message_id_seq"', 1, false);


--
-- Name: lmsApp_note_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_note_id_seq"', 302, true);


--
-- Name: lmsApp_room_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_room_id_seq"', 1, false);


--
-- Name: lmsApp_room_participants_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_room_participants_id_seq"', 1, false);


--
-- Name: lmsApp_topic_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_topic_id_seq"', 1, false);


--
-- Name: lmsApp_week_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_week_id_seq"', 1164, true);


--
-- Name: lmsApp_weekpdf_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."lmsApp_weekpdf_id_seq"', 1, false);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_celery_results_chordcounter django_celery_results_chordcounter_group_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_celery_results_chordcounter
    ADD CONSTRAINT django_celery_results_chordcounter_group_id_key UNIQUE (group_id);


--
-- Name: django_celery_results_chordcounter django_celery_results_chordcounter_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_celery_results_chordcounter
    ADD CONSTRAINT django_celery_results_chordcounter_pkey PRIMARY KEY (id);


--
-- Name: django_celery_results_groupresult django_celery_results_groupresult_group_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_celery_results_groupresult
    ADD CONSTRAINT django_celery_results_groupresult_group_id_key UNIQUE (group_id);


--
-- Name: django_celery_results_groupresult django_celery_results_groupresult_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_celery_results_groupresult
    ADD CONSTRAINT django_celery_results_groupresult_pkey PRIMARY KEY (id);


--
-- Name: django_celery_results_taskresult django_celery_results_taskresult_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_celery_results_taskresult
    ADD CONSTRAINT django_celery_results_taskresult_pkey PRIMARY KEY (id);


--
-- Name: django_celery_results_taskresult django_celery_results_taskresult_task_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_celery_results_taskresult
    ADD CONSTRAINT django_celery_results_taskresult_task_id_key UNIQUE (task_id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: lmsApp_chatmessage lmsApp_chatmessage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_chatmessage"
    ADD CONSTRAINT "lmsApp_chatmessage_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_event lmsApp_event_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_event"
    ADD CONSTRAINT "lmsApp_event_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_lesson lmsApp_lesson_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_lesson"
    ADD CONSTRAINT "lmsApp_lesson_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_message lmsApp_message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_message"
    ADD CONSTRAINT "lmsApp_message_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_note lmsApp_note_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_note"
    ADD CONSTRAINT "lmsApp_note_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_room_participants lmsApp_room_participants_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room_participants"
    ADD CONSTRAINT "lmsApp_room_participants_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_room_participants lmsApp_room_participants_room_id_user_id_bd24eec9_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room_participants"
    ADD CONSTRAINT "lmsApp_room_participants_room_id_user_id_bd24eec9_uniq" UNIQUE (room_id, user_id);


--
-- Name: lmsApp_room lmsApp_room_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room"
    ADD CONSTRAINT "lmsApp_room_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_topic lmsApp_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_topic"
    ADD CONSTRAINT "lmsApp_topic_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_week lmsApp_week_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_week"
    ADD CONSTRAINT "lmsApp_week_pkey" PRIMARY KEY (id);


--
-- Name: lmsApp_weekpdf lmsApp_weekpdf_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_weekpdf"
    ADD CONSTRAINT "lmsApp_weekpdf_pkey" PRIMARY KEY (id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_cele_date_cr_bd6c1d_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_date_cr_bd6c1d_idx ON public.django_celery_results_groupresult USING btree (date_created);


--
-- Name: django_cele_date_cr_f04a50_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_date_cr_f04a50_idx ON public.django_celery_results_taskresult USING btree (date_created);


--
-- Name: django_cele_date_do_caae0e_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_date_do_caae0e_idx ON public.django_celery_results_groupresult USING btree (date_done);


--
-- Name: django_cele_date_do_f59aad_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_date_do_f59aad_idx ON public.django_celery_results_taskresult USING btree (date_done);


--
-- Name: django_cele_status_9b6201_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_status_9b6201_idx ON public.django_celery_results_taskresult USING btree (status);


--
-- Name: django_cele_task_na_08aec9_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_task_na_08aec9_idx ON public.django_celery_results_taskresult USING btree (task_name);


--
-- Name: django_cele_worker_d54dd8_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_cele_worker_d54dd8_idx ON public.django_celery_results_taskresult USING btree (worker);


--
-- Name: django_celery_results_chordcounter_group_id_1f70858c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_celery_results_chordcounter_group_id_1f70858c_like ON public.django_celery_results_chordcounter USING btree (group_id varchar_pattern_ops);


--
-- Name: django_celery_results_groupresult_group_id_a085f1a9_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_celery_results_groupresult_group_id_a085f1a9_like ON public.django_celery_results_groupresult USING btree (group_id varchar_pattern_ops);


--
-- Name: django_celery_results_taskresult_task_id_de0d95bf_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_celery_results_taskresult_task_id_de0d95bf_like ON public.django_celery_results_taskresult USING btree (task_id varchar_pattern_ops);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: lmsApp_chatmessage_user_id_790cefbf; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_chatmessage_user_id_790cefbf" ON public."lmsApp_chatmessage" USING btree (user_id);


--
-- Name: lmsApp_event_user_id_0f4549be; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_event_user_id_0f4549be" ON public."lmsApp_event" USING btree (user_id);


--
-- Name: lmsApp_lesson_user_id_2aec5999; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_lesson_user_id_2aec5999" ON public."lmsApp_lesson" USING btree (user_id);


--
-- Name: lmsApp_message_room_id_ec134fbe; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_message_room_id_ec134fbe" ON public."lmsApp_message" USING btree (room_id);


--
-- Name: lmsApp_message_user_id_b60ffbf1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_message_user_id_b60ffbf1" ON public."lmsApp_message" USING btree (user_id);


--
-- Name: lmsApp_note_lesson_id_bc4b0e83; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_note_lesson_id_bc4b0e83" ON public."lmsApp_note" USING btree (lesson_id);


--
-- Name: lmsApp_note_user_id_90fe683d; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_note_user_id_90fe683d" ON public."lmsApp_note" USING btree (user_id);


--
-- Name: lmsApp_note_week_id_65e3fe17; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_note_week_id_65e3fe17" ON public."lmsApp_note" USING btree (week_id);


--
-- Name: lmsApp_room_host_id_4c57b744; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_room_host_id_4c57b744" ON public."lmsApp_room" USING btree (host_id);


--
-- Name: lmsApp_room_participants_room_id_5968afc2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_room_participants_room_id_5968afc2" ON public."lmsApp_room_participants" USING btree (room_id);


--
-- Name: lmsApp_room_participants_user_id_2e5755a2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_room_participants_user_id_2e5755a2" ON public."lmsApp_room_participants" USING btree (user_id);


--
-- Name: lmsApp_room_topic_id_f966a9cb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_room_topic_id_f966a9cb" ON public."lmsApp_room" USING btree (topic_id);


--
-- Name: lmsApp_week_lesson_id_8291d641; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_week_lesson_id_8291d641" ON public."lmsApp_week" USING btree (lesson_id);


--
-- Name: lmsApp_week_user_id_d6916c62; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_week_user_id_d6916c62" ON public."lmsApp_week" USING btree (user_id);


--
-- Name: lmsApp_weekpdf_user_id_d8e3db11; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_weekpdf_user_id_d8e3db11" ON public."lmsApp_weekpdf" USING btree (user_id);


--
-- Name: lmsApp_weekpdf_week_id_3ecf2749; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX "lmsApp_weekpdf_week_id_3ecf2749" ON public."lmsApp_weekpdf" USING btree (week_id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_chatmessage lmsApp_chatmessage_user_id_790cefbf_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_chatmessage"
    ADD CONSTRAINT "lmsApp_chatmessage_user_id_790cefbf_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_event lmsApp_event_user_id_0f4549be_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_event"
    ADD CONSTRAINT "lmsApp_event_user_id_0f4549be_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_lesson lmsApp_lesson_user_id_2aec5999_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_lesson"
    ADD CONSTRAINT "lmsApp_lesson_user_id_2aec5999_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_message lmsApp_message_room_id_ec134fbe_fk_lmsApp_room_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_message"
    ADD CONSTRAINT "lmsApp_message_room_id_ec134fbe_fk_lmsApp_room_id" FOREIGN KEY (room_id) REFERENCES public."lmsApp_room"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_message lmsApp_message_user_id_b60ffbf1_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_message"
    ADD CONSTRAINT "lmsApp_message_user_id_b60ffbf1_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_note lmsApp_note_lesson_id_bc4b0e83_fk_lmsApp_lesson_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_note"
    ADD CONSTRAINT "lmsApp_note_lesson_id_bc4b0e83_fk_lmsApp_lesson_id" FOREIGN KEY (lesson_id) REFERENCES public."lmsApp_lesson"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_note lmsApp_note_user_id_90fe683d_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_note"
    ADD CONSTRAINT "lmsApp_note_user_id_90fe683d_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_note lmsApp_note_week_id_65e3fe17_fk_lmsApp_week_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_note"
    ADD CONSTRAINT "lmsApp_note_week_id_65e3fe17_fk_lmsApp_week_id" FOREIGN KEY (week_id) REFERENCES public."lmsApp_week"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_room lmsApp_room_host_id_4c57b744_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room"
    ADD CONSTRAINT "lmsApp_room_host_id_4c57b744_fk_auth_user_id" FOREIGN KEY (host_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_room_participants lmsApp_room_participants_room_id_5968afc2_fk_lmsApp_room_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room_participants"
    ADD CONSTRAINT "lmsApp_room_participants_room_id_5968afc2_fk_lmsApp_room_id" FOREIGN KEY (room_id) REFERENCES public."lmsApp_room"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_room_participants lmsApp_room_participants_user_id_2e5755a2_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room_participants"
    ADD CONSTRAINT "lmsApp_room_participants_user_id_2e5755a2_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_room lmsApp_room_topic_id_f966a9cb_fk_lmsApp_topic_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_room"
    ADD CONSTRAINT "lmsApp_room_topic_id_f966a9cb_fk_lmsApp_topic_id" FOREIGN KEY (topic_id) REFERENCES public."lmsApp_topic"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_week lmsApp_week_lesson_id_8291d641_fk_lmsApp_lesson_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_week"
    ADD CONSTRAINT "lmsApp_week_lesson_id_8291d641_fk_lmsApp_lesson_id" FOREIGN KEY (lesson_id) REFERENCES public."lmsApp_lesson"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_week lmsApp_week_user_id_d6916c62_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_week"
    ADD CONSTRAINT "lmsApp_week_user_id_d6916c62_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_weekpdf lmsApp_weekpdf_user_id_d8e3db11_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_weekpdf"
    ADD CONSTRAINT "lmsApp_weekpdf_user_id_d8e3db11_fk_auth_user_id" FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: lmsApp_weekpdf lmsApp_weekpdf_week_id_3ecf2749_fk_lmsApp_week_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."lmsApp_weekpdf"
    ADD CONSTRAINT "lmsApp_weekpdf_week_id_3ecf2749_fk_lmsApp_week_id" FOREIGN KEY (week_id) REFERENCES public."lmsApp_week"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

